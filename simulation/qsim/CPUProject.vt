// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2021 21:55:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPUProject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPUProject_vlg_sample_tst(
	cpu_clk,
	rest,
	sampler_tx
);
input  cpu_clk;
input  rest;
output sampler_tx;

reg sample;
time current_time;
always @(cpu_clk or rest)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPUProject_vlg_check_tst (
	alupin,
	instruction_pin,
	jump_mux_option1_outpin,
	jump_mux_option2_outpin,
	jump_mux_option3_outpin,
	jump_mux_option4_outpin,
	jump_mux_select_outpin,
	pc_enable_pin,
	pc_input_pin,
	pcpin2,
	reg1_outpin,
	reg1address_outpin,
	reg2_outpin,
	reg2address_outpin,
	reg3address_outpin,
	sampler_rx
);
input [31:0] alupin;
input [31:0] instruction_pin;
input [31:0] jump_mux_option1_outpin;
input [31:0] jump_mux_option2_outpin;
input [31:0] jump_mux_option3_outpin;
input [31:0] jump_mux_option4_outpin;
input [1:0] jump_mux_select_outpin;
input  pc_enable_pin;
input [31:0] pc_input_pin;
input [31:0] pcpin2;
input [31:0] reg1_outpin;
input [4:0] reg1address_outpin;
input [31:0] reg2_outpin;
input [4:0] reg2address_outpin;
input [4:0] reg3address_outpin;
input sampler_rx;

reg [31:0] alupin_expected;
reg [31:0] instruction_pin_expected;
reg [31:0] jump_mux_option1_outpin_expected;
reg [31:0] jump_mux_option2_outpin_expected;
reg [31:0] jump_mux_option3_outpin_expected;
reg [31:0] jump_mux_option4_outpin_expected;
reg [1:0] jump_mux_select_outpin_expected;
reg  pc_enable_pin_expected;
reg [31:0] pc_input_pin_expected;
reg [31:0] pcpin2_expected;
reg [31:0] reg1_outpin_expected;
reg [4:0] reg1address_outpin_expected;
reg [31:0] reg2_outpin_expected;
reg [4:0] reg2address_outpin_expected;
reg [4:0] reg3address_outpin_expected;

reg [31:0] alupin_prev;
reg [31:0] instruction_pin_prev;
reg [31:0] jump_mux_option1_outpin_prev;
reg [31:0] jump_mux_option2_outpin_prev;
reg [31:0] jump_mux_option3_outpin_prev;
reg [31:0] jump_mux_option4_outpin_prev;
reg [1:0] jump_mux_select_outpin_prev;
reg  pc_enable_pin_prev;
reg [31:0] pc_input_pin_prev;
reg [31:0] pcpin2_prev;
reg [31:0] reg1_outpin_prev;
reg [4:0] reg1address_outpin_prev;
reg [31:0] reg2_outpin_prev;
reg [4:0] reg2address_outpin_prev;
reg [4:0] reg3address_outpin_prev;

reg [31:0] alupin_expected_prev;
reg [31:0] instruction_pin_expected_prev;
reg [31:0] jump_mux_option1_outpin_expected_prev;
reg [31:0] jump_mux_option2_outpin_expected_prev;
reg [31:0] jump_mux_option3_outpin_expected_prev;
reg [31:0] jump_mux_option4_outpin_expected_prev;
reg [1:0] jump_mux_select_outpin_expected_prev;
reg  pc_enable_pin_expected_prev;
reg [31:0] pc_input_pin_expected_prev;
reg [31:0] pcpin2_expected_prev;
reg [31:0] reg1_outpin_expected_prev;
reg [4:0] reg1address_outpin_expected_prev;
reg [31:0] reg2_outpin_expected_prev;
reg [4:0] reg2address_outpin_expected_prev;
reg [4:0] reg3address_outpin_expected_prev;

reg [31:0] last_alupin_exp;
reg [31:0] last_instruction_pin_exp;
reg [31:0] last_jump_mux_option1_outpin_exp;
reg [31:0] last_jump_mux_option2_outpin_exp;
reg [31:0] last_jump_mux_option3_outpin_exp;
reg [31:0] last_jump_mux_option4_outpin_exp;
reg [1:0] last_jump_mux_select_outpin_exp;
reg  last_pc_enable_pin_exp;
reg [31:0] last_pc_input_pin_exp;
reg [31:0] last_pcpin2_exp;
reg [31:0] last_reg1_outpin_exp;
reg [4:0] last_reg1address_outpin_exp;
reg [31:0] last_reg2_outpin_exp;
reg [4:0] last_reg2address_outpin_exp;
reg [4:0] last_reg3address_outpin_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	alupin_prev = alupin;
	instruction_pin_prev = instruction_pin;
	jump_mux_option1_outpin_prev = jump_mux_option1_outpin;
	jump_mux_option2_outpin_prev = jump_mux_option2_outpin;
	jump_mux_option3_outpin_prev = jump_mux_option3_outpin;
	jump_mux_option4_outpin_prev = jump_mux_option4_outpin;
	jump_mux_select_outpin_prev = jump_mux_select_outpin;
	pc_enable_pin_prev = pc_enable_pin;
	pc_input_pin_prev = pc_input_pin;
	pcpin2_prev = pcpin2;
	reg1_outpin_prev = reg1_outpin;
	reg1address_outpin_prev = reg1address_outpin;
	reg2_outpin_prev = reg2_outpin;
	reg2address_outpin_prev = reg2address_outpin;
	reg3address_outpin_prev = reg3address_outpin;
end

// update expected /o prevs

always @(trigger)
begin
	alupin_expected_prev = alupin_expected;
	instruction_pin_expected_prev = instruction_pin_expected;
	jump_mux_option1_outpin_expected_prev = jump_mux_option1_outpin_expected;
	jump_mux_option2_outpin_expected_prev = jump_mux_option2_outpin_expected;
	jump_mux_option3_outpin_expected_prev = jump_mux_option3_outpin_expected;
	jump_mux_option4_outpin_expected_prev = jump_mux_option4_outpin_expected;
	jump_mux_select_outpin_expected_prev = jump_mux_select_outpin_expected;
	pc_enable_pin_expected_prev = pc_enable_pin_expected;
	pc_input_pin_expected_prev = pc_input_pin_expected;
	pcpin2_expected_prev = pcpin2_expected;
	reg1_outpin_expected_prev = reg1_outpin_expected;
	reg1address_outpin_expected_prev = reg1address_outpin_expected;
	reg2_outpin_expected_prev = reg2_outpin_expected;
	reg2address_outpin_expected_prev = reg2address_outpin_expected;
	reg3address_outpin_expected_prev = reg3address_outpin_expected;
end



// expected pc_enable_pin
initial
begin
	pc_enable_pin_expected = 1'bX;
end 
// expected pcpin2[ 31 ]
initial
begin
	pcpin2_expected[31] = 1'bX;
end 
// expected pcpin2[ 30 ]
initial
begin
	pcpin2_expected[30] = 1'bX;
end 
// expected pcpin2[ 29 ]
initial
begin
	pcpin2_expected[29] = 1'bX;
end 
// expected pcpin2[ 28 ]
initial
begin
	pcpin2_expected[28] = 1'bX;
end 
// expected pcpin2[ 27 ]
initial
begin
	pcpin2_expected[27] = 1'bX;
end 
// expected pcpin2[ 26 ]
initial
begin
	pcpin2_expected[26] = 1'bX;
end 
// expected pcpin2[ 25 ]
initial
begin
	pcpin2_expected[25] = 1'bX;
end 
// expected pcpin2[ 24 ]
initial
begin
	pcpin2_expected[24] = 1'bX;
end 
// expected pcpin2[ 23 ]
initial
begin
	pcpin2_expected[23] = 1'bX;
end 
// expected pcpin2[ 22 ]
initial
begin
	pcpin2_expected[22] = 1'bX;
end 
// expected pcpin2[ 21 ]
initial
begin
	pcpin2_expected[21] = 1'bX;
end 
// expected pcpin2[ 20 ]
initial
begin
	pcpin2_expected[20] = 1'bX;
end 
// expected pcpin2[ 19 ]
initial
begin
	pcpin2_expected[19] = 1'bX;
end 
// expected pcpin2[ 18 ]
initial
begin
	pcpin2_expected[18] = 1'bX;
end 
// expected pcpin2[ 17 ]
initial
begin
	pcpin2_expected[17] = 1'bX;
end 
// expected pcpin2[ 16 ]
initial
begin
	pcpin2_expected[16] = 1'bX;
end 
// expected pcpin2[ 15 ]
initial
begin
	pcpin2_expected[15] = 1'bX;
end 
// expected pcpin2[ 14 ]
initial
begin
	pcpin2_expected[14] = 1'bX;
end 
// expected pcpin2[ 13 ]
initial
begin
	pcpin2_expected[13] = 1'bX;
end 
// expected pcpin2[ 12 ]
initial
begin
	pcpin2_expected[12] = 1'bX;
end 
// expected pcpin2[ 11 ]
initial
begin
	pcpin2_expected[11] = 1'bX;
end 
// expected pcpin2[ 10 ]
initial
begin
	pcpin2_expected[10] = 1'bX;
end 
// expected pcpin2[ 9 ]
initial
begin
	pcpin2_expected[9] = 1'bX;
end 
// expected pcpin2[ 8 ]
initial
begin
	pcpin2_expected[8] = 1'bX;
end 
// expected pcpin2[ 7 ]
initial
begin
	pcpin2_expected[7] = 1'bX;
end 
// expected pcpin2[ 6 ]
initial
begin
	pcpin2_expected[6] = 1'bX;
end 
// expected pcpin2[ 5 ]
initial
begin
	pcpin2_expected[5] = 1'bX;
end 
// expected pcpin2[ 4 ]
initial
begin
	pcpin2_expected[4] = 1'bX;
end 
// expected pcpin2[ 3 ]
initial
begin
	pcpin2_expected[3] = 1'bX;
end 
// expected pcpin2[ 2 ]
initial
begin
	pcpin2_expected[2] = 1'bX;
end 
// expected pcpin2[ 1 ]
initial
begin
	pcpin2_expected[1] = 1'bX;
end 
// expected pcpin2[ 0 ]
initial
begin
	pcpin2_expected[0] = 1'bX;
end 
// expected pc_input_pin[ 31 ]
initial
begin
	pc_input_pin_expected[31] = 1'bX;
end 
// expected pc_input_pin[ 30 ]
initial
begin
	pc_input_pin_expected[30] = 1'bX;
end 
// expected pc_input_pin[ 29 ]
initial
begin
	pc_input_pin_expected[29] = 1'bX;
end 
// expected pc_input_pin[ 28 ]
initial
begin
	pc_input_pin_expected[28] = 1'bX;
end 
// expected pc_input_pin[ 27 ]
initial
begin
	pc_input_pin_expected[27] = 1'bX;
end 
// expected pc_input_pin[ 26 ]
initial
begin
	pc_input_pin_expected[26] = 1'bX;
end 
// expected pc_input_pin[ 25 ]
initial
begin
	pc_input_pin_expected[25] = 1'bX;
end 
// expected pc_input_pin[ 24 ]
initial
begin
	pc_input_pin_expected[24] = 1'bX;
end 
// expected pc_input_pin[ 23 ]
initial
begin
	pc_input_pin_expected[23] = 1'bX;
end 
// expected pc_input_pin[ 22 ]
initial
begin
	pc_input_pin_expected[22] = 1'bX;
end 
// expected pc_input_pin[ 21 ]
initial
begin
	pc_input_pin_expected[21] = 1'bX;
end 
// expected pc_input_pin[ 20 ]
initial
begin
	pc_input_pin_expected[20] = 1'bX;
end 
// expected pc_input_pin[ 19 ]
initial
begin
	pc_input_pin_expected[19] = 1'bX;
end 
// expected pc_input_pin[ 18 ]
initial
begin
	pc_input_pin_expected[18] = 1'bX;
end 
// expected pc_input_pin[ 17 ]
initial
begin
	pc_input_pin_expected[17] = 1'bX;
end 
// expected pc_input_pin[ 16 ]
initial
begin
	pc_input_pin_expected[16] = 1'bX;
end 
// expected pc_input_pin[ 15 ]
initial
begin
	pc_input_pin_expected[15] = 1'bX;
end 
// expected pc_input_pin[ 14 ]
initial
begin
	pc_input_pin_expected[14] = 1'bX;
end 
// expected pc_input_pin[ 13 ]
initial
begin
	pc_input_pin_expected[13] = 1'bX;
end 
// expected pc_input_pin[ 12 ]
initial
begin
	pc_input_pin_expected[12] = 1'bX;
end 
// expected pc_input_pin[ 11 ]
initial
begin
	pc_input_pin_expected[11] = 1'bX;
end 
// expected pc_input_pin[ 10 ]
initial
begin
	pc_input_pin_expected[10] = 1'bX;
end 
// expected pc_input_pin[ 9 ]
initial
begin
	pc_input_pin_expected[9] = 1'bX;
end 
// expected pc_input_pin[ 8 ]
initial
begin
	pc_input_pin_expected[8] = 1'bX;
end 
// expected pc_input_pin[ 7 ]
initial
begin
	pc_input_pin_expected[7] = 1'bX;
end 
// expected pc_input_pin[ 6 ]
initial
begin
	pc_input_pin_expected[6] = 1'bX;
end 
// expected pc_input_pin[ 5 ]
initial
begin
	pc_input_pin_expected[5] = 1'bX;
end 
// expected pc_input_pin[ 4 ]
initial
begin
	pc_input_pin_expected[4] = 1'bX;
end 
// expected pc_input_pin[ 3 ]
initial
begin
	pc_input_pin_expected[3] = 1'bX;
end 
// expected pc_input_pin[ 2 ]
initial
begin
	pc_input_pin_expected[2] = 1'bX;
end 
// expected pc_input_pin[ 1 ]
initial
begin
	pc_input_pin_expected[1] = 1'bX;
end 
// expected pc_input_pin[ 0 ]
initial
begin
	pc_input_pin_expected[0] = 1'bX;
end 
// expected reg1_outpin[ 31 ]
initial
begin
	reg1_outpin_expected[31] = 1'bX;
end 
// expected reg1_outpin[ 30 ]
initial
begin
	reg1_outpin_expected[30] = 1'bX;
end 
// expected reg1_outpin[ 29 ]
initial
begin
	reg1_outpin_expected[29] = 1'bX;
end 
// expected reg1_outpin[ 28 ]
initial
begin
	reg1_outpin_expected[28] = 1'bX;
end 
// expected reg1_outpin[ 27 ]
initial
begin
	reg1_outpin_expected[27] = 1'bX;
end 
// expected reg1_outpin[ 26 ]
initial
begin
	reg1_outpin_expected[26] = 1'bX;
end 
// expected reg1_outpin[ 25 ]
initial
begin
	reg1_outpin_expected[25] = 1'bX;
end 
// expected reg1_outpin[ 24 ]
initial
begin
	reg1_outpin_expected[24] = 1'bX;
end 
// expected reg1_outpin[ 23 ]
initial
begin
	reg1_outpin_expected[23] = 1'bX;
end 
// expected reg1_outpin[ 22 ]
initial
begin
	reg1_outpin_expected[22] = 1'bX;
end 
// expected reg1_outpin[ 21 ]
initial
begin
	reg1_outpin_expected[21] = 1'bX;
end 
// expected reg1_outpin[ 20 ]
initial
begin
	reg1_outpin_expected[20] = 1'bX;
end 
// expected reg1_outpin[ 19 ]
initial
begin
	reg1_outpin_expected[19] = 1'bX;
end 
// expected reg1_outpin[ 18 ]
initial
begin
	reg1_outpin_expected[18] = 1'bX;
end 
// expected reg1_outpin[ 17 ]
initial
begin
	reg1_outpin_expected[17] = 1'bX;
end 
// expected reg1_outpin[ 16 ]
initial
begin
	reg1_outpin_expected[16] = 1'bX;
end 
// expected reg1_outpin[ 15 ]
initial
begin
	reg1_outpin_expected[15] = 1'bX;
end 
// expected reg1_outpin[ 14 ]
initial
begin
	reg1_outpin_expected[14] = 1'bX;
end 
// expected reg1_outpin[ 13 ]
initial
begin
	reg1_outpin_expected[13] = 1'bX;
end 
// expected reg1_outpin[ 12 ]
initial
begin
	reg1_outpin_expected[12] = 1'bX;
end 
// expected reg1_outpin[ 11 ]
initial
begin
	reg1_outpin_expected[11] = 1'bX;
end 
// expected reg1_outpin[ 10 ]
initial
begin
	reg1_outpin_expected[10] = 1'bX;
end 
// expected reg1_outpin[ 9 ]
initial
begin
	reg1_outpin_expected[9] = 1'bX;
end 
// expected reg1_outpin[ 8 ]
initial
begin
	reg1_outpin_expected[8] = 1'bX;
end 
// expected reg1_outpin[ 7 ]
initial
begin
	reg1_outpin_expected[7] = 1'bX;
end 
// expected reg1_outpin[ 6 ]
initial
begin
	reg1_outpin_expected[6] = 1'bX;
end 
// expected reg1_outpin[ 5 ]
initial
begin
	reg1_outpin_expected[5] = 1'bX;
end 
// expected reg1_outpin[ 4 ]
initial
begin
	reg1_outpin_expected[4] = 1'bX;
end 
// expected reg1_outpin[ 3 ]
initial
begin
	reg1_outpin_expected[3] = 1'bX;
end 
// expected reg1_outpin[ 2 ]
initial
begin
	reg1_outpin_expected[2] = 1'bX;
end 
// expected reg1_outpin[ 1 ]
initial
begin
	reg1_outpin_expected[1] = 1'bX;
end 
// expected reg1_outpin[ 0 ]
initial
begin
	reg1_outpin_expected[0] = 1'bX;
end 
// expected reg2_outpin[ 31 ]
initial
begin
	reg2_outpin_expected[31] = 1'bX;
end 
// expected reg2_outpin[ 30 ]
initial
begin
	reg2_outpin_expected[30] = 1'bX;
end 
// expected reg2_outpin[ 29 ]
initial
begin
	reg2_outpin_expected[29] = 1'bX;
end 
// expected reg2_outpin[ 28 ]
initial
begin
	reg2_outpin_expected[28] = 1'bX;
end 
// expected reg2_outpin[ 27 ]
initial
begin
	reg2_outpin_expected[27] = 1'bX;
end 
// expected reg2_outpin[ 26 ]
initial
begin
	reg2_outpin_expected[26] = 1'bX;
end 
// expected reg2_outpin[ 25 ]
initial
begin
	reg2_outpin_expected[25] = 1'bX;
end 
// expected reg2_outpin[ 24 ]
initial
begin
	reg2_outpin_expected[24] = 1'bX;
end 
// expected reg2_outpin[ 23 ]
initial
begin
	reg2_outpin_expected[23] = 1'bX;
end 
// expected reg2_outpin[ 22 ]
initial
begin
	reg2_outpin_expected[22] = 1'bX;
end 
// expected reg2_outpin[ 21 ]
initial
begin
	reg2_outpin_expected[21] = 1'bX;
end 
// expected reg2_outpin[ 20 ]
initial
begin
	reg2_outpin_expected[20] = 1'bX;
end 
// expected reg2_outpin[ 19 ]
initial
begin
	reg2_outpin_expected[19] = 1'bX;
end 
// expected reg2_outpin[ 18 ]
initial
begin
	reg2_outpin_expected[18] = 1'bX;
end 
// expected reg2_outpin[ 17 ]
initial
begin
	reg2_outpin_expected[17] = 1'bX;
end 
// expected reg2_outpin[ 16 ]
initial
begin
	reg2_outpin_expected[16] = 1'bX;
end 
// expected reg2_outpin[ 15 ]
initial
begin
	reg2_outpin_expected[15] = 1'bX;
end 
// expected reg2_outpin[ 14 ]
initial
begin
	reg2_outpin_expected[14] = 1'bX;
end 
// expected reg2_outpin[ 13 ]
initial
begin
	reg2_outpin_expected[13] = 1'bX;
end 
// expected reg2_outpin[ 12 ]
initial
begin
	reg2_outpin_expected[12] = 1'bX;
end 
// expected reg2_outpin[ 11 ]
initial
begin
	reg2_outpin_expected[11] = 1'bX;
end 
// expected reg2_outpin[ 10 ]
initial
begin
	reg2_outpin_expected[10] = 1'bX;
end 
// expected reg2_outpin[ 9 ]
initial
begin
	reg2_outpin_expected[9] = 1'bX;
end 
// expected reg2_outpin[ 8 ]
initial
begin
	reg2_outpin_expected[8] = 1'bX;
end 
// expected reg2_outpin[ 7 ]
initial
begin
	reg2_outpin_expected[7] = 1'bX;
end 
// expected reg2_outpin[ 6 ]
initial
begin
	reg2_outpin_expected[6] = 1'bX;
end 
// expected reg2_outpin[ 5 ]
initial
begin
	reg2_outpin_expected[5] = 1'bX;
end 
// expected reg2_outpin[ 4 ]
initial
begin
	reg2_outpin_expected[4] = 1'bX;
end 
// expected reg2_outpin[ 3 ]
initial
begin
	reg2_outpin_expected[3] = 1'bX;
end 
// expected reg2_outpin[ 2 ]
initial
begin
	reg2_outpin_expected[2] = 1'bX;
end 
// expected reg2_outpin[ 1 ]
initial
begin
	reg2_outpin_expected[1] = 1'bX;
end 
// expected reg2_outpin[ 0 ]
initial
begin
	reg2_outpin_expected[0] = 1'bX;
end 
// expected instruction_pin[ 31 ]
initial
begin
	instruction_pin_expected[31] = 1'bX;
end 
// expected instruction_pin[ 30 ]
initial
begin
	instruction_pin_expected[30] = 1'bX;
end 
// expected instruction_pin[ 29 ]
initial
begin
	instruction_pin_expected[29] = 1'bX;
end 
// expected instruction_pin[ 28 ]
initial
begin
	instruction_pin_expected[28] = 1'bX;
end 
// expected instruction_pin[ 27 ]
initial
begin
	instruction_pin_expected[27] = 1'bX;
end 
// expected instruction_pin[ 26 ]
initial
begin
	instruction_pin_expected[26] = 1'bX;
end 
// expected instruction_pin[ 25 ]
initial
begin
	instruction_pin_expected[25] = 1'bX;
end 
// expected instruction_pin[ 24 ]
initial
begin
	instruction_pin_expected[24] = 1'bX;
end 
// expected instruction_pin[ 23 ]
initial
begin
	instruction_pin_expected[23] = 1'bX;
end 
// expected instruction_pin[ 22 ]
initial
begin
	instruction_pin_expected[22] = 1'bX;
end 
// expected instruction_pin[ 21 ]
initial
begin
	instruction_pin_expected[21] = 1'bX;
end 
// expected instruction_pin[ 20 ]
initial
begin
	instruction_pin_expected[20] = 1'bX;
end 
// expected instruction_pin[ 19 ]
initial
begin
	instruction_pin_expected[19] = 1'bX;
end 
// expected instruction_pin[ 18 ]
initial
begin
	instruction_pin_expected[18] = 1'bX;
end 
// expected instruction_pin[ 17 ]
initial
begin
	instruction_pin_expected[17] = 1'bX;
end 
// expected instruction_pin[ 16 ]
initial
begin
	instruction_pin_expected[16] = 1'bX;
end 
// expected instruction_pin[ 15 ]
initial
begin
	instruction_pin_expected[15] = 1'bX;
end 
// expected instruction_pin[ 14 ]
initial
begin
	instruction_pin_expected[14] = 1'bX;
end 
// expected instruction_pin[ 13 ]
initial
begin
	instruction_pin_expected[13] = 1'bX;
end 
// expected instruction_pin[ 12 ]
initial
begin
	instruction_pin_expected[12] = 1'bX;
end 
// expected instruction_pin[ 11 ]
initial
begin
	instruction_pin_expected[11] = 1'bX;
end 
// expected instruction_pin[ 10 ]
initial
begin
	instruction_pin_expected[10] = 1'bX;
end 
// expected instruction_pin[ 9 ]
initial
begin
	instruction_pin_expected[9] = 1'bX;
end 
// expected instruction_pin[ 8 ]
initial
begin
	instruction_pin_expected[8] = 1'bX;
end 
// expected instruction_pin[ 7 ]
initial
begin
	instruction_pin_expected[7] = 1'bX;
end 
// expected instruction_pin[ 6 ]
initial
begin
	instruction_pin_expected[6] = 1'bX;
end 
// expected instruction_pin[ 5 ]
initial
begin
	instruction_pin_expected[5] = 1'bX;
end 
// expected instruction_pin[ 4 ]
initial
begin
	instruction_pin_expected[4] = 1'bX;
end 
// expected instruction_pin[ 3 ]
initial
begin
	instruction_pin_expected[3] = 1'bX;
end 
// expected instruction_pin[ 2 ]
initial
begin
	instruction_pin_expected[2] = 1'bX;
end 
// expected instruction_pin[ 1 ]
initial
begin
	instruction_pin_expected[1] = 1'bX;
end 
// expected instruction_pin[ 0 ]
initial
begin
	instruction_pin_expected[0] = 1'bX;
end 
// expected alupin[ 31 ]
initial
begin
	alupin_expected[31] = 1'bX;
end 
// expected alupin[ 30 ]
initial
begin
	alupin_expected[30] = 1'bX;
end 
// expected alupin[ 29 ]
initial
begin
	alupin_expected[29] = 1'bX;
end 
// expected alupin[ 28 ]
initial
begin
	alupin_expected[28] = 1'bX;
end 
// expected alupin[ 27 ]
initial
begin
	alupin_expected[27] = 1'bX;
end 
// expected alupin[ 26 ]
initial
begin
	alupin_expected[26] = 1'bX;
end 
// expected alupin[ 25 ]
initial
begin
	alupin_expected[25] = 1'bX;
end 
// expected alupin[ 24 ]
initial
begin
	alupin_expected[24] = 1'bX;
end 
// expected alupin[ 23 ]
initial
begin
	alupin_expected[23] = 1'bX;
end 
// expected alupin[ 22 ]
initial
begin
	alupin_expected[22] = 1'bX;
end 
// expected alupin[ 21 ]
initial
begin
	alupin_expected[21] = 1'bX;
end 
// expected alupin[ 20 ]
initial
begin
	alupin_expected[20] = 1'bX;
end 
// expected alupin[ 19 ]
initial
begin
	alupin_expected[19] = 1'bX;
end 
// expected alupin[ 18 ]
initial
begin
	alupin_expected[18] = 1'bX;
end 
// expected alupin[ 17 ]
initial
begin
	alupin_expected[17] = 1'bX;
end 
// expected alupin[ 16 ]
initial
begin
	alupin_expected[16] = 1'bX;
end 
// expected alupin[ 15 ]
initial
begin
	alupin_expected[15] = 1'bX;
end 
// expected alupin[ 14 ]
initial
begin
	alupin_expected[14] = 1'bX;
end 
// expected alupin[ 13 ]
initial
begin
	alupin_expected[13] = 1'bX;
end 
// expected alupin[ 12 ]
initial
begin
	alupin_expected[12] = 1'bX;
end 
// expected alupin[ 11 ]
initial
begin
	alupin_expected[11] = 1'bX;
end 
// expected alupin[ 10 ]
initial
begin
	alupin_expected[10] = 1'bX;
end 
// expected alupin[ 9 ]
initial
begin
	alupin_expected[9] = 1'bX;
end 
// expected alupin[ 8 ]
initial
begin
	alupin_expected[8] = 1'bX;
end 
// expected alupin[ 7 ]
initial
begin
	alupin_expected[7] = 1'bX;
end 
// expected alupin[ 6 ]
initial
begin
	alupin_expected[6] = 1'bX;
end 
// expected alupin[ 5 ]
initial
begin
	alupin_expected[5] = 1'bX;
end 
// expected alupin[ 4 ]
initial
begin
	alupin_expected[4] = 1'bX;
end 
// expected alupin[ 3 ]
initial
begin
	alupin_expected[3] = 1'bX;
end 
// expected alupin[ 2 ]
initial
begin
	alupin_expected[2] = 1'bX;
end 
// expected alupin[ 1 ]
initial
begin
	alupin_expected[1] = 1'bX;
end 
// expected alupin[ 0 ]
initial
begin
	alupin_expected[0] = 1'bX;
end 
// expected reg1address_outpin[ 4 ]
initial
begin
	reg1address_outpin_expected[4] = 1'bX;
end 
// expected reg1address_outpin[ 3 ]
initial
begin
	reg1address_outpin_expected[3] = 1'bX;
end 
// expected reg1address_outpin[ 2 ]
initial
begin
	reg1address_outpin_expected[2] = 1'bX;
end 
// expected reg1address_outpin[ 1 ]
initial
begin
	reg1address_outpin_expected[1] = 1'bX;
end 
// expected reg1address_outpin[ 0 ]
initial
begin
	reg1address_outpin_expected[0] = 1'bX;
end 
// expected reg2address_outpin[ 4 ]
initial
begin
	reg2address_outpin_expected[4] = 1'bX;
end 
// expected reg2address_outpin[ 3 ]
initial
begin
	reg2address_outpin_expected[3] = 1'bX;
end 
// expected reg2address_outpin[ 2 ]
initial
begin
	reg2address_outpin_expected[2] = 1'bX;
end 
// expected reg2address_outpin[ 1 ]
initial
begin
	reg2address_outpin_expected[1] = 1'bX;
end 
// expected reg2address_outpin[ 0 ]
initial
begin
	reg2address_outpin_expected[0] = 1'bX;
end 
// expected reg3address_outpin[ 4 ]
initial
begin
	reg3address_outpin_expected[4] = 1'bX;
end 
// expected reg3address_outpin[ 3 ]
initial
begin
	reg3address_outpin_expected[3] = 1'bX;
end 
// expected reg3address_outpin[ 2 ]
initial
begin
	reg3address_outpin_expected[2] = 1'bX;
end 
// expected reg3address_outpin[ 1 ]
initial
begin
	reg3address_outpin_expected[1] = 1'bX;
end 
// expected reg3address_outpin[ 0 ]
initial
begin
	reg3address_outpin_expected[0] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 31 ]
initial
begin
	jump_mux_option1_outpin_expected[31] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 30 ]
initial
begin
	jump_mux_option1_outpin_expected[30] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 29 ]
initial
begin
	jump_mux_option1_outpin_expected[29] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 28 ]
initial
begin
	jump_mux_option1_outpin_expected[28] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 27 ]
initial
begin
	jump_mux_option1_outpin_expected[27] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 26 ]
initial
begin
	jump_mux_option1_outpin_expected[26] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 25 ]
initial
begin
	jump_mux_option1_outpin_expected[25] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 24 ]
initial
begin
	jump_mux_option1_outpin_expected[24] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 23 ]
initial
begin
	jump_mux_option1_outpin_expected[23] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 22 ]
initial
begin
	jump_mux_option1_outpin_expected[22] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 21 ]
initial
begin
	jump_mux_option1_outpin_expected[21] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 20 ]
initial
begin
	jump_mux_option1_outpin_expected[20] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 19 ]
initial
begin
	jump_mux_option1_outpin_expected[19] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 18 ]
initial
begin
	jump_mux_option1_outpin_expected[18] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 17 ]
initial
begin
	jump_mux_option1_outpin_expected[17] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 16 ]
initial
begin
	jump_mux_option1_outpin_expected[16] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 15 ]
initial
begin
	jump_mux_option1_outpin_expected[15] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 14 ]
initial
begin
	jump_mux_option1_outpin_expected[14] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 13 ]
initial
begin
	jump_mux_option1_outpin_expected[13] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 12 ]
initial
begin
	jump_mux_option1_outpin_expected[12] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 11 ]
initial
begin
	jump_mux_option1_outpin_expected[11] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 10 ]
initial
begin
	jump_mux_option1_outpin_expected[10] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 9 ]
initial
begin
	jump_mux_option1_outpin_expected[9] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 8 ]
initial
begin
	jump_mux_option1_outpin_expected[8] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 7 ]
initial
begin
	jump_mux_option1_outpin_expected[7] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 6 ]
initial
begin
	jump_mux_option1_outpin_expected[6] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 5 ]
initial
begin
	jump_mux_option1_outpin_expected[5] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 4 ]
initial
begin
	jump_mux_option1_outpin_expected[4] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 3 ]
initial
begin
	jump_mux_option1_outpin_expected[3] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 2 ]
initial
begin
	jump_mux_option1_outpin_expected[2] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 1 ]
initial
begin
	jump_mux_option1_outpin_expected[1] = 1'bX;
end 
// expected jump_mux_option1_outpin[ 0 ]
initial
begin
	jump_mux_option1_outpin_expected[0] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 31 ]
initial
begin
	jump_mux_option2_outpin_expected[31] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 30 ]
initial
begin
	jump_mux_option2_outpin_expected[30] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 29 ]
initial
begin
	jump_mux_option2_outpin_expected[29] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 28 ]
initial
begin
	jump_mux_option2_outpin_expected[28] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 27 ]
initial
begin
	jump_mux_option2_outpin_expected[27] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 26 ]
initial
begin
	jump_mux_option2_outpin_expected[26] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 25 ]
initial
begin
	jump_mux_option2_outpin_expected[25] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 24 ]
initial
begin
	jump_mux_option2_outpin_expected[24] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 23 ]
initial
begin
	jump_mux_option2_outpin_expected[23] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 22 ]
initial
begin
	jump_mux_option2_outpin_expected[22] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 21 ]
initial
begin
	jump_mux_option2_outpin_expected[21] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 20 ]
initial
begin
	jump_mux_option2_outpin_expected[20] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 19 ]
initial
begin
	jump_mux_option2_outpin_expected[19] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 18 ]
initial
begin
	jump_mux_option2_outpin_expected[18] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 17 ]
initial
begin
	jump_mux_option2_outpin_expected[17] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 16 ]
initial
begin
	jump_mux_option2_outpin_expected[16] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 15 ]
initial
begin
	jump_mux_option2_outpin_expected[15] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 14 ]
initial
begin
	jump_mux_option2_outpin_expected[14] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 13 ]
initial
begin
	jump_mux_option2_outpin_expected[13] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 12 ]
initial
begin
	jump_mux_option2_outpin_expected[12] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 11 ]
initial
begin
	jump_mux_option2_outpin_expected[11] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 10 ]
initial
begin
	jump_mux_option2_outpin_expected[10] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 9 ]
initial
begin
	jump_mux_option2_outpin_expected[9] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 8 ]
initial
begin
	jump_mux_option2_outpin_expected[8] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 7 ]
initial
begin
	jump_mux_option2_outpin_expected[7] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 6 ]
initial
begin
	jump_mux_option2_outpin_expected[6] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 5 ]
initial
begin
	jump_mux_option2_outpin_expected[5] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 4 ]
initial
begin
	jump_mux_option2_outpin_expected[4] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 3 ]
initial
begin
	jump_mux_option2_outpin_expected[3] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 2 ]
initial
begin
	jump_mux_option2_outpin_expected[2] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 1 ]
initial
begin
	jump_mux_option2_outpin_expected[1] = 1'bX;
end 
// expected jump_mux_option2_outpin[ 0 ]
initial
begin
	jump_mux_option2_outpin_expected[0] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 31 ]
initial
begin
	jump_mux_option3_outpin_expected[31] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 30 ]
initial
begin
	jump_mux_option3_outpin_expected[30] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 29 ]
initial
begin
	jump_mux_option3_outpin_expected[29] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 28 ]
initial
begin
	jump_mux_option3_outpin_expected[28] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 27 ]
initial
begin
	jump_mux_option3_outpin_expected[27] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 26 ]
initial
begin
	jump_mux_option3_outpin_expected[26] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 25 ]
initial
begin
	jump_mux_option3_outpin_expected[25] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 24 ]
initial
begin
	jump_mux_option3_outpin_expected[24] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 23 ]
initial
begin
	jump_mux_option3_outpin_expected[23] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 22 ]
initial
begin
	jump_mux_option3_outpin_expected[22] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 21 ]
initial
begin
	jump_mux_option3_outpin_expected[21] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 20 ]
initial
begin
	jump_mux_option3_outpin_expected[20] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 19 ]
initial
begin
	jump_mux_option3_outpin_expected[19] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 18 ]
initial
begin
	jump_mux_option3_outpin_expected[18] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 17 ]
initial
begin
	jump_mux_option3_outpin_expected[17] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 16 ]
initial
begin
	jump_mux_option3_outpin_expected[16] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 15 ]
initial
begin
	jump_mux_option3_outpin_expected[15] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 14 ]
initial
begin
	jump_mux_option3_outpin_expected[14] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 13 ]
initial
begin
	jump_mux_option3_outpin_expected[13] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 12 ]
initial
begin
	jump_mux_option3_outpin_expected[12] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 11 ]
initial
begin
	jump_mux_option3_outpin_expected[11] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 10 ]
initial
begin
	jump_mux_option3_outpin_expected[10] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 9 ]
initial
begin
	jump_mux_option3_outpin_expected[9] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 8 ]
initial
begin
	jump_mux_option3_outpin_expected[8] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 7 ]
initial
begin
	jump_mux_option3_outpin_expected[7] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 6 ]
initial
begin
	jump_mux_option3_outpin_expected[6] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 5 ]
initial
begin
	jump_mux_option3_outpin_expected[5] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 4 ]
initial
begin
	jump_mux_option3_outpin_expected[4] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 3 ]
initial
begin
	jump_mux_option3_outpin_expected[3] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 2 ]
initial
begin
	jump_mux_option3_outpin_expected[2] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 1 ]
initial
begin
	jump_mux_option3_outpin_expected[1] = 1'bX;
end 
// expected jump_mux_option3_outpin[ 0 ]
initial
begin
	jump_mux_option3_outpin_expected[0] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 31 ]
initial
begin
	jump_mux_option4_outpin_expected[31] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 30 ]
initial
begin
	jump_mux_option4_outpin_expected[30] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 29 ]
initial
begin
	jump_mux_option4_outpin_expected[29] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 28 ]
initial
begin
	jump_mux_option4_outpin_expected[28] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 27 ]
initial
begin
	jump_mux_option4_outpin_expected[27] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 26 ]
initial
begin
	jump_mux_option4_outpin_expected[26] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 25 ]
initial
begin
	jump_mux_option4_outpin_expected[25] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 24 ]
initial
begin
	jump_mux_option4_outpin_expected[24] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 23 ]
initial
begin
	jump_mux_option4_outpin_expected[23] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 22 ]
initial
begin
	jump_mux_option4_outpin_expected[22] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 21 ]
initial
begin
	jump_mux_option4_outpin_expected[21] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 20 ]
initial
begin
	jump_mux_option4_outpin_expected[20] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 19 ]
initial
begin
	jump_mux_option4_outpin_expected[19] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 18 ]
initial
begin
	jump_mux_option4_outpin_expected[18] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 17 ]
initial
begin
	jump_mux_option4_outpin_expected[17] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 16 ]
initial
begin
	jump_mux_option4_outpin_expected[16] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 15 ]
initial
begin
	jump_mux_option4_outpin_expected[15] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 14 ]
initial
begin
	jump_mux_option4_outpin_expected[14] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 13 ]
initial
begin
	jump_mux_option4_outpin_expected[13] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 12 ]
initial
begin
	jump_mux_option4_outpin_expected[12] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 11 ]
initial
begin
	jump_mux_option4_outpin_expected[11] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 10 ]
initial
begin
	jump_mux_option4_outpin_expected[10] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 9 ]
initial
begin
	jump_mux_option4_outpin_expected[9] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 8 ]
initial
begin
	jump_mux_option4_outpin_expected[8] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 7 ]
initial
begin
	jump_mux_option4_outpin_expected[7] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 6 ]
initial
begin
	jump_mux_option4_outpin_expected[6] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 5 ]
initial
begin
	jump_mux_option4_outpin_expected[5] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 4 ]
initial
begin
	jump_mux_option4_outpin_expected[4] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 3 ]
initial
begin
	jump_mux_option4_outpin_expected[3] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 2 ]
initial
begin
	jump_mux_option4_outpin_expected[2] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 1 ]
initial
begin
	jump_mux_option4_outpin_expected[1] = 1'bX;
end 
// expected jump_mux_option4_outpin[ 0 ]
initial
begin
	jump_mux_option4_outpin_expected[0] = 1'bX;
end 
// expected jump_mux_select_outpin[ 1 ]
initial
begin
	jump_mux_select_outpin_expected[1] = 1'bX;
end 
// expected jump_mux_select_outpin[ 0 ]
initial
begin
	jump_mux_select_outpin_expected[0] = 1'bX;
end 
// generate trigger
always @(alupin_expected or alupin or instruction_pin_expected or instruction_pin or jump_mux_option1_outpin_expected or jump_mux_option1_outpin or jump_mux_option2_outpin_expected or jump_mux_option2_outpin or jump_mux_option3_outpin_expected or jump_mux_option3_outpin or jump_mux_option4_outpin_expected or jump_mux_option4_outpin or jump_mux_select_outpin_expected or jump_mux_select_outpin or pc_enable_pin_expected or pc_enable_pin or pc_input_pin_expected or pc_input_pin or pcpin2_expected or pcpin2 or reg1_outpin_expected or reg1_outpin or reg1address_outpin_expected or reg1address_outpin or reg2_outpin_expected or reg2_outpin or reg2address_outpin_expected or reg2address_outpin or reg3address_outpin_expected or reg3address_outpin)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alupin = %b | expected instruction_pin = %b | expected jump_mux_option1_outpin = %b | expected jump_mux_option2_outpin = %b | expected jump_mux_option3_outpin = %b | expected jump_mux_option4_outpin = %b | expected jump_mux_select_outpin = %b | expected pc_enable_pin = %b | expected pc_input_pin = %b | expected pcpin2 = %b | expected reg1_outpin = %b | expected reg1address_outpin = %b | expected reg2_outpin = %b | expected reg2address_outpin = %b | expected reg3address_outpin = %b | ",alupin_expected_prev,instruction_pin_expected_prev,jump_mux_option1_outpin_expected_prev,jump_mux_option2_outpin_expected_prev,jump_mux_option3_outpin_expected_prev,jump_mux_option4_outpin_expected_prev,jump_mux_select_outpin_expected_prev,pc_enable_pin_expected_prev,pc_input_pin_expected_prev,pcpin2_expected_prev,reg1_outpin_expected_prev,reg1address_outpin_expected_prev,reg2_outpin_expected_prev,reg2address_outpin_expected_prev,reg3address_outpin_expected_prev);
	$display("| real alupin = %b | real instruction_pin = %b | real jump_mux_option1_outpin = %b | real jump_mux_option2_outpin = %b | real jump_mux_option3_outpin = %b | real jump_mux_option4_outpin = %b | real jump_mux_select_outpin = %b | real pc_enable_pin = %b | real pc_input_pin = %b | real pcpin2 = %b | real reg1_outpin = %b | real reg1address_outpin = %b | real reg2_outpin = %b | real reg2address_outpin = %b | real reg3address_outpin = %b | ",alupin_prev,instruction_pin_prev,jump_mux_option1_outpin_prev,jump_mux_option2_outpin_prev,jump_mux_option3_outpin_prev,jump_mux_option4_outpin_prev,jump_mux_select_outpin_prev,pc_enable_pin_prev,pc_input_pin_prev,pcpin2_prev,reg1_outpin_prev,reg1address_outpin_prev,reg2_outpin_prev,reg2address_outpin_prev,reg3address_outpin_prev);
`endif
	if (
		( alupin_expected_prev[0] !== 1'bx ) && ( alupin_prev[0] !== alupin_expected_prev[0] )
		&& ((alupin_expected_prev[0] !== last_alupin_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[0] = alupin_expected_prev[0];
	end
	if (
		( alupin_expected_prev[1] !== 1'bx ) && ( alupin_prev[1] !== alupin_expected_prev[1] )
		&& ((alupin_expected_prev[1] !== last_alupin_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[1] = alupin_expected_prev[1];
	end
	if (
		( alupin_expected_prev[2] !== 1'bx ) && ( alupin_prev[2] !== alupin_expected_prev[2] )
		&& ((alupin_expected_prev[2] !== last_alupin_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[2] = alupin_expected_prev[2];
	end
	if (
		( alupin_expected_prev[3] !== 1'bx ) && ( alupin_prev[3] !== alupin_expected_prev[3] )
		&& ((alupin_expected_prev[3] !== last_alupin_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[3] = alupin_expected_prev[3];
	end
	if (
		( alupin_expected_prev[4] !== 1'bx ) && ( alupin_prev[4] !== alupin_expected_prev[4] )
		&& ((alupin_expected_prev[4] !== last_alupin_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[4] = alupin_expected_prev[4];
	end
	if (
		( alupin_expected_prev[5] !== 1'bx ) && ( alupin_prev[5] !== alupin_expected_prev[5] )
		&& ((alupin_expected_prev[5] !== last_alupin_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[5] = alupin_expected_prev[5];
	end
	if (
		( alupin_expected_prev[6] !== 1'bx ) && ( alupin_prev[6] !== alupin_expected_prev[6] )
		&& ((alupin_expected_prev[6] !== last_alupin_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[6] = alupin_expected_prev[6];
	end
	if (
		( alupin_expected_prev[7] !== 1'bx ) && ( alupin_prev[7] !== alupin_expected_prev[7] )
		&& ((alupin_expected_prev[7] !== last_alupin_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[7] = alupin_expected_prev[7];
	end
	if (
		( alupin_expected_prev[8] !== 1'bx ) && ( alupin_prev[8] !== alupin_expected_prev[8] )
		&& ((alupin_expected_prev[8] !== last_alupin_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[8] = alupin_expected_prev[8];
	end
	if (
		( alupin_expected_prev[9] !== 1'bx ) && ( alupin_prev[9] !== alupin_expected_prev[9] )
		&& ((alupin_expected_prev[9] !== last_alupin_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[9] = alupin_expected_prev[9];
	end
	if (
		( alupin_expected_prev[10] !== 1'bx ) && ( alupin_prev[10] !== alupin_expected_prev[10] )
		&& ((alupin_expected_prev[10] !== last_alupin_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[10] = alupin_expected_prev[10];
	end
	if (
		( alupin_expected_prev[11] !== 1'bx ) && ( alupin_prev[11] !== alupin_expected_prev[11] )
		&& ((alupin_expected_prev[11] !== last_alupin_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[11] = alupin_expected_prev[11];
	end
	if (
		( alupin_expected_prev[12] !== 1'bx ) && ( alupin_prev[12] !== alupin_expected_prev[12] )
		&& ((alupin_expected_prev[12] !== last_alupin_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[12] = alupin_expected_prev[12];
	end
	if (
		( alupin_expected_prev[13] !== 1'bx ) && ( alupin_prev[13] !== alupin_expected_prev[13] )
		&& ((alupin_expected_prev[13] !== last_alupin_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[13] = alupin_expected_prev[13];
	end
	if (
		( alupin_expected_prev[14] !== 1'bx ) && ( alupin_prev[14] !== alupin_expected_prev[14] )
		&& ((alupin_expected_prev[14] !== last_alupin_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[14] = alupin_expected_prev[14];
	end
	if (
		( alupin_expected_prev[15] !== 1'bx ) && ( alupin_prev[15] !== alupin_expected_prev[15] )
		&& ((alupin_expected_prev[15] !== last_alupin_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[15] = alupin_expected_prev[15];
	end
	if (
		( alupin_expected_prev[16] !== 1'bx ) && ( alupin_prev[16] !== alupin_expected_prev[16] )
		&& ((alupin_expected_prev[16] !== last_alupin_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[16] = alupin_expected_prev[16];
	end
	if (
		( alupin_expected_prev[17] !== 1'bx ) && ( alupin_prev[17] !== alupin_expected_prev[17] )
		&& ((alupin_expected_prev[17] !== last_alupin_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[17] = alupin_expected_prev[17];
	end
	if (
		( alupin_expected_prev[18] !== 1'bx ) && ( alupin_prev[18] !== alupin_expected_prev[18] )
		&& ((alupin_expected_prev[18] !== last_alupin_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[18] = alupin_expected_prev[18];
	end
	if (
		( alupin_expected_prev[19] !== 1'bx ) && ( alupin_prev[19] !== alupin_expected_prev[19] )
		&& ((alupin_expected_prev[19] !== last_alupin_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[19] = alupin_expected_prev[19];
	end
	if (
		( alupin_expected_prev[20] !== 1'bx ) && ( alupin_prev[20] !== alupin_expected_prev[20] )
		&& ((alupin_expected_prev[20] !== last_alupin_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[20] = alupin_expected_prev[20];
	end
	if (
		( alupin_expected_prev[21] !== 1'bx ) && ( alupin_prev[21] !== alupin_expected_prev[21] )
		&& ((alupin_expected_prev[21] !== last_alupin_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[21] = alupin_expected_prev[21];
	end
	if (
		( alupin_expected_prev[22] !== 1'bx ) && ( alupin_prev[22] !== alupin_expected_prev[22] )
		&& ((alupin_expected_prev[22] !== last_alupin_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[22] = alupin_expected_prev[22];
	end
	if (
		( alupin_expected_prev[23] !== 1'bx ) && ( alupin_prev[23] !== alupin_expected_prev[23] )
		&& ((alupin_expected_prev[23] !== last_alupin_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[23] = alupin_expected_prev[23];
	end
	if (
		( alupin_expected_prev[24] !== 1'bx ) && ( alupin_prev[24] !== alupin_expected_prev[24] )
		&& ((alupin_expected_prev[24] !== last_alupin_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[24] = alupin_expected_prev[24];
	end
	if (
		( alupin_expected_prev[25] !== 1'bx ) && ( alupin_prev[25] !== alupin_expected_prev[25] )
		&& ((alupin_expected_prev[25] !== last_alupin_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[25] = alupin_expected_prev[25];
	end
	if (
		( alupin_expected_prev[26] !== 1'bx ) && ( alupin_prev[26] !== alupin_expected_prev[26] )
		&& ((alupin_expected_prev[26] !== last_alupin_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[26] = alupin_expected_prev[26];
	end
	if (
		( alupin_expected_prev[27] !== 1'bx ) && ( alupin_prev[27] !== alupin_expected_prev[27] )
		&& ((alupin_expected_prev[27] !== last_alupin_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[27] = alupin_expected_prev[27];
	end
	if (
		( alupin_expected_prev[28] !== 1'bx ) && ( alupin_prev[28] !== alupin_expected_prev[28] )
		&& ((alupin_expected_prev[28] !== last_alupin_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[28] = alupin_expected_prev[28];
	end
	if (
		( alupin_expected_prev[29] !== 1'bx ) && ( alupin_prev[29] !== alupin_expected_prev[29] )
		&& ((alupin_expected_prev[29] !== last_alupin_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[29] = alupin_expected_prev[29];
	end
	if (
		( alupin_expected_prev[30] !== 1'bx ) && ( alupin_prev[30] !== alupin_expected_prev[30] )
		&& ((alupin_expected_prev[30] !== last_alupin_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[30] = alupin_expected_prev[30];
	end
	if (
		( alupin_expected_prev[31] !== 1'bx ) && ( alupin_prev[31] !== alupin_expected_prev[31] )
		&& ((alupin_expected_prev[31] !== last_alupin_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alupin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alupin_expected_prev);
		$display ("     Real value = %b", alupin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alupin_exp[31] = alupin_expected_prev[31];
	end
	if (
		( instruction_pin_expected_prev[0] !== 1'bx ) && ( instruction_pin_prev[0] !== instruction_pin_expected_prev[0] )
		&& ((instruction_pin_expected_prev[0] !== last_instruction_pin_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[0] = instruction_pin_expected_prev[0];
	end
	if (
		( instruction_pin_expected_prev[1] !== 1'bx ) && ( instruction_pin_prev[1] !== instruction_pin_expected_prev[1] )
		&& ((instruction_pin_expected_prev[1] !== last_instruction_pin_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[1] = instruction_pin_expected_prev[1];
	end
	if (
		( instruction_pin_expected_prev[2] !== 1'bx ) && ( instruction_pin_prev[2] !== instruction_pin_expected_prev[2] )
		&& ((instruction_pin_expected_prev[2] !== last_instruction_pin_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[2] = instruction_pin_expected_prev[2];
	end
	if (
		( instruction_pin_expected_prev[3] !== 1'bx ) && ( instruction_pin_prev[3] !== instruction_pin_expected_prev[3] )
		&& ((instruction_pin_expected_prev[3] !== last_instruction_pin_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[3] = instruction_pin_expected_prev[3];
	end
	if (
		( instruction_pin_expected_prev[4] !== 1'bx ) && ( instruction_pin_prev[4] !== instruction_pin_expected_prev[4] )
		&& ((instruction_pin_expected_prev[4] !== last_instruction_pin_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[4] = instruction_pin_expected_prev[4];
	end
	if (
		( instruction_pin_expected_prev[5] !== 1'bx ) && ( instruction_pin_prev[5] !== instruction_pin_expected_prev[5] )
		&& ((instruction_pin_expected_prev[5] !== last_instruction_pin_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[5] = instruction_pin_expected_prev[5];
	end
	if (
		( instruction_pin_expected_prev[6] !== 1'bx ) && ( instruction_pin_prev[6] !== instruction_pin_expected_prev[6] )
		&& ((instruction_pin_expected_prev[6] !== last_instruction_pin_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[6] = instruction_pin_expected_prev[6];
	end
	if (
		( instruction_pin_expected_prev[7] !== 1'bx ) && ( instruction_pin_prev[7] !== instruction_pin_expected_prev[7] )
		&& ((instruction_pin_expected_prev[7] !== last_instruction_pin_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[7] = instruction_pin_expected_prev[7];
	end
	if (
		( instruction_pin_expected_prev[8] !== 1'bx ) && ( instruction_pin_prev[8] !== instruction_pin_expected_prev[8] )
		&& ((instruction_pin_expected_prev[8] !== last_instruction_pin_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[8] = instruction_pin_expected_prev[8];
	end
	if (
		( instruction_pin_expected_prev[9] !== 1'bx ) && ( instruction_pin_prev[9] !== instruction_pin_expected_prev[9] )
		&& ((instruction_pin_expected_prev[9] !== last_instruction_pin_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[9] = instruction_pin_expected_prev[9];
	end
	if (
		( instruction_pin_expected_prev[10] !== 1'bx ) && ( instruction_pin_prev[10] !== instruction_pin_expected_prev[10] )
		&& ((instruction_pin_expected_prev[10] !== last_instruction_pin_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[10] = instruction_pin_expected_prev[10];
	end
	if (
		( instruction_pin_expected_prev[11] !== 1'bx ) && ( instruction_pin_prev[11] !== instruction_pin_expected_prev[11] )
		&& ((instruction_pin_expected_prev[11] !== last_instruction_pin_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[11] = instruction_pin_expected_prev[11];
	end
	if (
		( instruction_pin_expected_prev[12] !== 1'bx ) && ( instruction_pin_prev[12] !== instruction_pin_expected_prev[12] )
		&& ((instruction_pin_expected_prev[12] !== last_instruction_pin_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[12] = instruction_pin_expected_prev[12];
	end
	if (
		( instruction_pin_expected_prev[13] !== 1'bx ) && ( instruction_pin_prev[13] !== instruction_pin_expected_prev[13] )
		&& ((instruction_pin_expected_prev[13] !== last_instruction_pin_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[13] = instruction_pin_expected_prev[13];
	end
	if (
		( instruction_pin_expected_prev[14] !== 1'bx ) && ( instruction_pin_prev[14] !== instruction_pin_expected_prev[14] )
		&& ((instruction_pin_expected_prev[14] !== last_instruction_pin_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[14] = instruction_pin_expected_prev[14];
	end
	if (
		( instruction_pin_expected_prev[15] !== 1'bx ) && ( instruction_pin_prev[15] !== instruction_pin_expected_prev[15] )
		&& ((instruction_pin_expected_prev[15] !== last_instruction_pin_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[15] = instruction_pin_expected_prev[15];
	end
	if (
		( instruction_pin_expected_prev[16] !== 1'bx ) && ( instruction_pin_prev[16] !== instruction_pin_expected_prev[16] )
		&& ((instruction_pin_expected_prev[16] !== last_instruction_pin_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[16] = instruction_pin_expected_prev[16];
	end
	if (
		( instruction_pin_expected_prev[17] !== 1'bx ) && ( instruction_pin_prev[17] !== instruction_pin_expected_prev[17] )
		&& ((instruction_pin_expected_prev[17] !== last_instruction_pin_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[17] = instruction_pin_expected_prev[17];
	end
	if (
		( instruction_pin_expected_prev[18] !== 1'bx ) && ( instruction_pin_prev[18] !== instruction_pin_expected_prev[18] )
		&& ((instruction_pin_expected_prev[18] !== last_instruction_pin_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[18] = instruction_pin_expected_prev[18];
	end
	if (
		( instruction_pin_expected_prev[19] !== 1'bx ) && ( instruction_pin_prev[19] !== instruction_pin_expected_prev[19] )
		&& ((instruction_pin_expected_prev[19] !== last_instruction_pin_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[19] = instruction_pin_expected_prev[19];
	end
	if (
		( instruction_pin_expected_prev[20] !== 1'bx ) && ( instruction_pin_prev[20] !== instruction_pin_expected_prev[20] )
		&& ((instruction_pin_expected_prev[20] !== last_instruction_pin_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[20] = instruction_pin_expected_prev[20];
	end
	if (
		( instruction_pin_expected_prev[21] !== 1'bx ) && ( instruction_pin_prev[21] !== instruction_pin_expected_prev[21] )
		&& ((instruction_pin_expected_prev[21] !== last_instruction_pin_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[21] = instruction_pin_expected_prev[21];
	end
	if (
		( instruction_pin_expected_prev[22] !== 1'bx ) && ( instruction_pin_prev[22] !== instruction_pin_expected_prev[22] )
		&& ((instruction_pin_expected_prev[22] !== last_instruction_pin_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[22] = instruction_pin_expected_prev[22];
	end
	if (
		( instruction_pin_expected_prev[23] !== 1'bx ) && ( instruction_pin_prev[23] !== instruction_pin_expected_prev[23] )
		&& ((instruction_pin_expected_prev[23] !== last_instruction_pin_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[23] = instruction_pin_expected_prev[23];
	end
	if (
		( instruction_pin_expected_prev[24] !== 1'bx ) && ( instruction_pin_prev[24] !== instruction_pin_expected_prev[24] )
		&& ((instruction_pin_expected_prev[24] !== last_instruction_pin_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[24] = instruction_pin_expected_prev[24];
	end
	if (
		( instruction_pin_expected_prev[25] !== 1'bx ) && ( instruction_pin_prev[25] !== instruction_pin_expected_prev[25] )
		&& ((instruction_pin_expected_prev[25] !== last_instruction_pin_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[25] = instruction_pin_expected_prev[25];
	end
	if (
		( instruction_pin_expected_prev[26] !== 1'bx ) && ( instruction_pin_prev[26] !== instruction_pin_expected_prev[26] )
		&& ((instruction_pin_expected_prev[26] !== last_instruction_pin_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[26] = instruction_pin_expected_prev[26];
	end
	if (
		( instruction_pin_expected_prev[27] !== 1'bx ) && ( instruction_pin_prev[27] !== instruction_pin_expected_prev[27] )
		&& ((instruction_pin_expected_prev[27] !== last_instruction_pin_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[27] = instruction_pin_expected_prev[27];
	end
	if (
		( instruction_pin_expected_prev[28] !== 1'bx ) && ( instruction_pin_prev[28] !== instruction_pin_expected_prev[28] )
		&& ((instruction_pin_expected_prev[28] !== last_instruction_pin_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[28] = instruction_pin_expected_prev[28];
	end
	if (
		( instruction_pin_expected_prev[29] !== 1'bx ) && ( instruction_pin_prev[29] !== instruction_pin_expected_prev[29] )
		&& ((instruction_pin_expected_prev[29] !== last_instruction_pin_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[29] = instruction_pin_expected_prev[29];
	end
	if (
		( instruction_pin_expected_prev[30] !== 1'bx ) && ( instruction_pin_prev[30] !== instruction_pin_expected_prev[30] )
		&& ((instruction_pin_expected_prev[30] !== last_instruction_pin_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[30] = instruction_pin_expected_prev[30];
	end
	if (
		( instruction_pin_expected_prev[31] !== 1'bx ) && ( instruction_pin_prev[31] !== instruction_pin_expected_prev[31] )
		&& ((instruction_pin_expected_prev[31] !== last_instruction_pin_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_pin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_pin_expected_prev);
		$display ("     Real value = %b", instruction_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instruction_pin_exp[31] = instruction_pin_expected_prev[31];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[0] !== 1'bx ) && ( jump_mux_option1_outpin_prev[0] !== jump_mux_option1_outpin_expected_prev[0] )
		&& ((jump_mux_option1_outpin_expected_prev[0] !== last_jump_mux_option1_outpin_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[0] = jump_mux_option1_outpin_expected_prev[0];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[1] !== 1'bx ) && ( jump_mux_option1_outpin_prev[1] !== jump_mux_option1_outpin_expected_prev[1] )
		&& ((jump_mux_option1_outpin_expected_prev[1] !== last_jump_mux_option1_outpin_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[1] = jump_mux_option1_outpin_expected_prev[1];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[2] !== 1'bx ) && ( jump_mux_option1_outpin_prev[2] !== jump_mux_option1_outpin_expected_prev[2] )
		&& ((jump_mux_option1_outpin_expected_prev[2] !== last_jump_mux_option1_outpin_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[2] = jump_mux_option1_outpin_expected_prev[2];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[3] !== 1'bx ) && ( jump_mux_option1_outpin_prev[3] !== jump_mux_option1_outpin_expected_prev[3] )
		&& ((jump_mux_option1_outpin_expected_prev[3] !== last_jump_mux_option1_outpin_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[3] = jump_mux_option1_outpin_expected_prev[3];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[4] !== 1'bx ) && ( jump_mux_option1_outpin_prev[4] !== jump_mux_option1_outpin_expected_prev[4] )
		&& ((jump_mux_option1_outpin_expected_prev[4] !== last_jump_mux_option1_outpin_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[4] = jump_mux_option1_outpin_expected_prev[4];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[5] !== 1'bx ) && ( jump_mux_option1_outpin_prev[5] !== jump_mux_option1_outpin_expected_prev[5] )
		&& ((jump_mux_option1_outpin_expected_prev[5] !== last_jump_mux_option1_outpin_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[5] = jump_mux_option1_outpin_expected_prev[5];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[6] !== 1'bx ) && ( jump_mux_option1_outpin_prev[6] !== jump_mux_option1_outpin_expected_prev[6] )
		&& ((jump_mux_option1_outpin_expected_prev[6] !== last_jump_mux_option1_outpin_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[6] = jump_mux_option1_outpin_expected_prev[6];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[7] !== 1'bx ) && ( jump_mux_option1_outpin_prev[7] !== jump_mux_option1_outpin_expected_prev[7] )
		&& ((jump_mux_option1_outpin_expected_prev[7] !== last_jump_mux_option1_outpin_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[7] = jump_mux_option1_outpin_expected_prev[7];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[8] !== 1'bx ) && ( jump_mux_option1_outpin_prev[8] !== jump_mux_option1_outpin_expected_prev[8] )
		&& ((jump_mux_option1_outpin_expected_prev[8] !== last_jump_mux_option1_outpin_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[8] = jump_mux_option1_outpin_expected_prev[8];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[9] !== 1'bx ) && ( jump_mux_option1_outpin_prev[9] !== jump_mux_option1_outpin_expected_prev[9] )
		&& ((jump_mux_option1_outpin_expected_prev[9] !== last_jump_mux_option1_outpin_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[9] = jump_mux_option1_outpin_expected_prev[9];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[10] !== 1'bx ) && ( jump_mux_option1_outpin_prev[10] !== jump_mux_option1_outpin_expected_prev[10] )
		&& ((jump_mux_option1_outpin_expected_prev[10] !== last_jump_mux_option1_outpin_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[10] = jump_mux_option1_outpin_expected_prev[10];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[11] !== 1'bx ) && ( jump_mux_option1_outpin_prev[11] !== jump_mux_option1_outpin_expected_prev[11] )
		&& ((jump_mux_option1_outpin_expected_prev[11] !== last_jump_mux_option1_outpin_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[11] = jump_mux_option1_outpin_expected_prev[11];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[12] !== 1'bx ) && ( jump_mux_option1_outpin_prev[12] !== jump_mux_option1_outpin_expected_prev[12] )
		&& ((jump_mux_option1_outpin_expected_prev[12] !== last_jump_mux_option1_outpin_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[12] = jump_mux_option1_outpin_expected_prev[12];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[13] !== 1'bx ) && ( jump_mux_option1_outpin_prev[13] !== jump_mux_option1_outpin_expected_prev[13] )
		&& ((jump_mux_option1_outpin_expected_prev[13] !== last_jump_mux_option1_outpin_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[13] = jump_mux_option1_outpin_expected_prev[13];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[14] !== 1'bx ) && ( jump_mux_option1_outpin_prev[14] !== jump_mux_option1_outpin_expected_prev[14] )
		&& ((jump_mux_option1_outpin_expected_prev[14] !== last_jump_mux_option1_outpin_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[14] = jump_mux_option1_outpin_expected_prev[14];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[15] !== 1'bx ) && ( jump_mux_option1_outpin_prev[15] !== jump_mux_option1_outpin_expected_prev[15] )
		&& ((jump_mux_option1_outpin_expected_prev[15] !== last_jump_mux_option1_outpin_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[15] = jump_mux_option1_outpin_expected_prev[15];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[16] !== 1'bx ) && ( jump_mux_option1_outpin_prev[16] !== jump_mux_option1_outpin_expected_prev[16] )
		&& ((jump_mux_option1_outpin_expected_prev[16] !== last_jump_mux_option1_outpin_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[16] = jump_mux_option1_outpin_expected_prev[16];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[17] !== 1'bx ) && ( jump_mux_option1_outpin_prev[17] !== jump_mux_option1_outpin_expected_prev[17] )
		&& ((jump_mux_option1_outpin_expected_prev[17] !== last_jump_mux_option1_outpin_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[17] = jump_mux_option1_outpin_expected_prev[17];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[18] !== 1'bx ) && ( jump_mux_option1_outpin_prev[18] !== jump_mux_option1_outpin_expected_prev[18] )
		&& ((jump_mux_option1_outpin_expected_prev[18] !== last_jump_mux_option1_outpin_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[18] = jump_mux_option1_outpin_expected_prev[18];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[19] !== 1'bx ) && ( jump_mux_option1_outpin_prev[19] !== jump_mux_option1_outpin_expected_prev[19] )
		&& ((jump_mux_option1_outpin_expected_prev[19] !== last_jump_mux_option1_outpin_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[19] = jump_mux_option1_outpin_expected_prev[19];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[20] !== 1'bx ) && ( jump_mux_option1_outpin_prev[20] !== jump_mux_option1_outpin_expected_prev[20] )
		&& ((jump_mux_option1_outpin_expected_prev[20] !== last_jump_mux_option1_outpin_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[20] = jump_mux_option1_outpin_expected_prev[20];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[21] !== 1'bx ) && ( jump_mux_option1_outpin_prev[21] !== jump_mux_option1_outpin_expected_prev[21] )
		&& ((jump_mux_option1_outpin_expected_prev[21] !== last_jump_mux_option1_outpin_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[21] = jump_mux_option1_outpin_expected_prev[21];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[22] !== 1'bx ) && ( jump_mux_option1_outpin_prev[22] !== jump_mux_option1_outpin_expected_prev[22] )
		&& ((jump_mux_option1_outpin_expected_prev[22] !== last_jump_mux_option1_outpin_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[22] = jump_mux_option1_outpin_expected_prev[22];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[23] !== 1'bx ) && ( jump_mux_option1_outpin_prev[23] !== jump_mux_option1_outpin_expected_prev[23] )
		&& ((jump_mux_option1_outpin_expected_prev[23] !== last_jump_mux_option1_outpin_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[23] = jump_mux_option1_outpin_expected_prev[23];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[24] !== 1'bx ) && ( jump_mux_option1_outpin_prev[24] !== jump_mux_option1_outpin_expected_prev[24] )
		&& ((jump_mux_option1_outpin_expected_prev[24] !== last_jump_mux_option1_outpin_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[24] = jump_mux_option1_outpin_expected_prev[24];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[25] !== 1'bx ) && ( jump_mux_option1_outpin_prev[25] !== jump_mux_option1_outpin_expected_prev[25] )
		&& ((jump_mux_option1_outpin_expected_prev[25] !== last_jump_mux_option1_outpin_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[25] = jump_mux_option1_outpin_expected_prev[25];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[26] !== 1'bx ) && ( jump_mux_option1_outpin_prev[26] !== jump_mux_option1_outpin_expected_prev[26] )
		&& ((jump_mux_option1_outpin_expected_prev[26] !== last_jump_mux_option1_outpin_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[26] = jump_mux_option1_outpin_expected_prev[26];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[27] !== 1'bx ) && ( jump_mux_option1_outpin_prev[27] !== jump_mux_option1_outpin_expected_prev[27] )
		&& ((jump_mux_option1_outpin_expected_prev[27] !== last_jump_mux_option1_outpin_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[27] = jump_mux_option1_outpin_expected_prev[27];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[28] !== 1'bx ) && ( jump_mux_option1_outpin_prev[28] !== jump_mux_option1_outpin_expected_prev[28] )
		&& ((jump_mux_option1_outpin_expected_prev[28] !== last_jump_mux_option1_outpin_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[28] = jump_mux_option1_outpin_expected_prev[28];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[29] !== 1'bx ) && ( jump_mux_option1_outpin_prev[29] !== jump_mux_option1_outpin_expected_prev[29] )
		&& ((jump_mux_option1_outpin_expected_prev[29] !== last_jump_mux_option1_outpin_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[29] = jump_mux_option1_outpin_expected_prev[29];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[30] !== 1'bx ) && ( jump_mux_option1_outpin_prev[30] !== jump_mux_option1_outpin_expected_prev[30] )
		&& ((jump_mux_option1_outpin_expected_prev[30] !== last_jump_mux_option1_outpin_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[30] = jump_mux_option1_outpin_expected_prev[30];
	end
	if (
		( jump_mux_option1_outpin_expected_prev[31] !== 1'bx ) && ( jump_mux_option1_outpin_prev[31] !== jump_mux_option1_outpin_expected_prev[31] )
		&& ((jump_mux_option1_outpin_expected_prev[31] !== last_jump_mux_option1_outpin_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option1_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option1_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_jump_mux_option1_outpin_exp[31] = jump_mux_option1_outpin_expected_prev[31];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[0] !== 1'bx ) && ( jump_mux_option2_outpin_prev[0] !== jump_mux_option2_outpin_expected_prev[0] )
		&& ((jump_mux_option2_outpin_expected_prev[0] !== last_jump_mux_option2_outpin_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[0] = jump_mux_option2_outpin_expected_prev[0];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[1] !== 1'bx ) && ( jump_mux_option2_outpin_prev[1] !== jump_mux_option2_outpin_expected_prev[1] )
		&& ((jump_mux_option2_outpin_expected_prev[1] !== last_jump_mux_option2_outpin_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[1] = jump_mux_option2_outpin_expected_prev[1];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[2] !== 1'bx ) && ( jump_mux_option2_outpin_prev[2] !== jump_mux_option2_outpin_expected_prev[2] )
		&& ((jump_mux_option2_outpin_expected_prev[2] !== last_jump_mux_option2_outpin_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[2] = jump_mux_option2_outpin_expected_prev[2];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[3] !== 1'bx ) && ( jump_mux_option2_outpin_prev[3] !== jump_mux_option2_outpin_expected_prev[3] )
		&& ((jump_mux_option2_outpin_expected_prev[3] !== last_jump_mux_option2_outpin_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[3] = jump_mux_option2_outpin_expected_prev[3];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[4] !== 1'bx ) && ( jump_mux_option2_outpin_prev[4] !== jump_mux_option2_outpin_expected_prev[4] )
		&& ((jump_mux_option2_outpin_expected_prev[4] !== last_jump_mux_option2_outpin_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[4] = jump_mux_option2_outpin_expected_prev[4];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[5] !== 1'bx ) && ( jump_mux_option2_outpin_prev[5] !== jump_mux_option2_outpin_expected_prev[5] )
		&& ((jump_mux_option2_outpin_expected_prev[5] !== last_jump_mux_option2_outpin_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[5] = jump_mux_option2_outpin_expected_prev[5];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[6] !== 1'bx ) && ( jump_mux_option2_outpin_prev[6] !== jump_mux_option2_outpin_expected_prev[6] )
		&& ((jump_mux_option2_outpin_expected_prev[6] !== last_jump_mux_option2_outpin_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[6] = jump_mux_option2_outpin_expected_prev[6];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[7] !== 1'bx ) && ( jump_mux_option2_outpin_prev[7] !== jump_mux_option2_outpin_expected_prev[7] )
		&& ((jump_mux_option2_outpin_expected_prev[7] !== last_jump_mux_option2_outpin_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[7] = jump_mux_option2_outpin_expected_prev[7];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[8] !== 1'bx ) && ( jump_mux_option2_outpin_prev[8] !== jump_mux_option2_outpin_expected_prev[8] )
		&& ((jump_mux_option2_outpin_expected_prev[8] !== last_jump_mux_option2_outpin_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[8] = jump_mux_option2_outpin_expected_prev[8];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[9] !== 1'bx ) && ( jump_mux_option2_outpin_prev[9] !== jump_mux_option2_outpin_expected_prev[9] )
		&& ((jump_mux_option2_outpin_expected_prev[9] !== last_jump_mux_option2_outpin_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[9] = jump_mux_option2_outpin_expected_prev[9];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[10] !== 1'bx ) && ( jump_mux_option2_outpin_prev[10] !== jump_mux_option2_outpin_expected_prev[10] )
		&& ((jump_mux_option2_outpin_expected_prev[10] !== last_jump_mux_option2_outpin_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[10] = jump_mux_option2_outpin_expected_prev[10];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[11] !== 1'bx ) && ( jump_mux_option2_outpin_prev[11] !== jump_mux_option2_outpin_expected_prev[11] )
		&& ((jump_mux_option2_outpin_expected_prev[11] !== last_jump_mux_option2_outpin_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[11] = jump_mux_option2_outpin_expected_prev[11];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[12] !== 1'bx ) && ( jump_mux_option2_outpin_prev[12] !== jump_mux_option2_outpin_expected_prev[12] )
		&& ((jump_mux_option2_outpin_expected_prev[12] !== last_jump_mux_option2_outpin_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[12] = jump_mux_option2_outpin_expected_prev[12];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[13] !== 1'bx ) && ( jump_mux_option2_outpin_prev[13] !== jump_mux_option2_outpin_expected_prev[13] )
		&& ((jump_mux_option2_outpin_expected_prev[13] !== last_jump_mux_option2_outpin_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[13] = jump_mux_option2_outpin_expected_prev[13];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[14] !== 1'bx ) && ( jump_mux_option2_outpin_prev[14] !== jump_mux_option2_outpin_expected_prev[14] )
		&& ((jump_mux_option2_outpin_expected_prev[14] !== last_jump_mux_option2_outpin_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[14] = jump_mux_option2_outpin_expected_prev[14];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[15] !== 1'bx ) && ( jump_mux_option2_outpin_prev[15] !== jump_mux_option2_outpin_expected_prev[15] )
		&& ((jump_mux_option2_outpin_expected_prev[15] !== last_jump_mux_option2_outpin_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[15] = jump_mux_option2_outpin_expected_prev[15];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[16] !== 1'bx ) && ( jump_mux_option2_outpin_prev[16] !== jump_mux_option2_outpin_expected_prev[16] )
		&& ((jump_mux_option2_outpin_expected_prev[16] !== last_jump_mux_option2_outpin_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[16] = jump_mux_option2_outpin_expected_prev[16];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[17] !== 1'bx ) && ( jump_mux_option2_outpin_prev[17] !== jump_mux_option2_outpin_expected_prev[17] )
		&& ((jump_mux_option2_outpin_expected_prev[17] !== last_jump_mux_option2_outpin_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[17] = jump_mux_option2_outpin_expected_prev[17];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[18] !== 1'bx ) && ( jump_mux_option2_outpin_prev[18] !== jump_mux_option2_outpin_expected_prev[18] )
		&& ((jump_mux_option2_outpin_expected_prev[18] !== last_jump_mux_option2_outpin_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[18] = jump_mux_option2_outpin_expected_prev[18];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[19] !== 1'bx ) && ( jump_mux_option2_outpin_prev[19] !== jump_mux_option2_outpin_expected_prev[19] )
		&& ((jump_mux_option2_outpin_expected_prev[19] !== last_jump_mux_option2_outpin_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[19] = jump_mux_option2_outpin_expected_prev[19];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[20] !== 1'bx ) && ( jump_mux_option2_outpin_prev[20] !== jump_mux_option2_outpin_expected_prev[20] )
		&& ((jump_mux_option2_outpin_expected_prev[20] !== last_jump_mux_option2_outpin_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[20] = jump_mux_option2_outpin_expected_prev[20];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[21] !== 1'bx ) && ( jump_mux_option2_outpin_prev[21] !== jump_mux_option2_outpin_expected_prev[21] )
		&& ((jump_mux_option2_outpin_expected_prev[21] !== last_jump_mux_option2_outpin_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[21] = jump_mux_option2_outpin_expected_prev[21];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[22] !== 1'bx ) && ( jump_mux_option2_outpin_prev[22] !== jump_mux_option2_outpin_expected_prev[22] )
		&& ((jump_mux_option2_outpin_expected_prev[22] !== last_jump_mux_option2_outpin_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[22] = jump_mux_option2_outpin_expected_prev[22];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[23] !== 1'bx ) && ( jump_mux_option2_outpin_prev[23] !== jump_mux_option2_outpin_expected_prev[23] )
		&& ((jump_mux_option2_outpin_expected_prev[23] !== last_jump_mux_option2_outpin_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[23] = jump_mux_option2_outpin_expected_prev[23];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[24] !== 1'bx ) && ( jump_mux_option2_outpin_prev[24] !== jump_mux_option2_outpin_expected_prev[24] )
		&& ((jump_mux_option2_outpin_expected_prev[24] !== last_jump_mux_option2_outpin_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[24] = jump_mux_option2_outpin_expected_prev[24];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[25] !== 1'bx ) && ( jump_mux_option2_outpin_prev[25] !== jump_mux_option2_outpin_expected_prev[25] )
		&& ((jump_mux_option2_outpin_expected_prev[25] !== last_jump_mux_option2_outpin_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[25] = jump_mux_option2_outpin_expected_prev[25];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[26] !== 1'bx ) && ( jump_mux_option2_outpin_prev[26] !== jump_mux_option2_outpin_expected_prev[26] )
		&& ((jump_mux_option2_outpin_expected_prev[26] !== last_jump_mux_option2_outpin_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[26] = jump_mux_option2_outpin_expected_prev[26];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[27] !== 1'bx ) && ( jump_mux_option2_outpin_prev[27] !== jump_mux_option2_outpin_expected_prev[27] )
		&& ((jump_mux_option2_outpin_expected_prev[27] !== last_jump_mux_option2_outpin_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[27] = jump_mux_option2_outpin_expected_prev[27];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[28] !== 1'bx ) && ( jump_mux_option2_outpin_prev[28] !== jump_mux_option2_outpin_expected_prev[28] )
		&& ((jump_mux_option2_outpin_expected_prev[28] !== last_jump_mux_option2_outpin_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[28] = jump_mux_option2_outpin_expected_prev[28];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[29] !== 1'bx ) && ( jump_mux_option2_outpin_prev[29] !== jump_mux_option2_outpin_expected_prev[29] )
		&& ((jump_mux_option2_outpin_expected_prev[29] !== last_jump_mux_option2_outpin_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[29] = jump_mux_option2_outpin_expected_prev[29];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[30] !== 1'bx ) && ( jump_mux_option2_outpin_prev[30] !== jump_mux_option2_outpin_expected_prev[30] )
		&& ((jump_mux_option2_outpin_expected_prev[30] !== last_jump_mux_option2_outpin_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[30] = jump_mux_option2_outpin_expected_prev[30];
	end
	if (
		( jump_mux_option2_outpin_expected_prev[31] !== 1'bx ) && ( jump_mux_option2_outpin_prev[31] !== jump_mux_option2_outpin_expected_prev[31] )
		&& ((jump_mux_option2_outpin_expected_prev[31] !== last_jump_mux_option2_outpin_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option2_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option2_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_jump_mux_option2_outpin_exp[31] = jump_mux_option2_outpin_expected_prev[31];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[0] !== 1'bx ) && ( jump_mux_option3_outpin_prev[0] !== jump_mux_option3_outpin_expected_prev[0] )
		&& ((jump_mux_option3_outpin_expected_prev[0] !== last_jump_mux_option3_outpin_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[0] = jump_mux_option3_outpin_expected_prev[0];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[1] !== 1'bx ) && ( jump_mux_option3_outpin_prev[1] !== jump_mux_option3_outpin_expected_prev[1] )
		&& ((jump_mux_option3_outpin_expected_prev[1] !== last_jump_mux_option3_outpin_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[1] = jump_mux_option3_outpin_expected_prev[1];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[2] !== 1'bx ) && ( jump_mux_option3_outpin_prev[2] !== jump_mux_option3_outpin_expected_prev[2] )
		&& ((jump_mux_option3_outpin_expected_prev[2] !== last_jump_mux_option3_outpin_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[2] = jump_mux_option3_outpin_expected_prev[2];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[3] !== 1'bx ) && ( jump_mux_option3_outpin_prev[3] !== jump_mux_option3_outpin_expected_prev[3] )
		&& ((jump_mux_option3_outpin_expected_prev[3] !== last_jump_mux_option3_outpin_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[3] = jump_mux_option3_outpin_expected_prev[3];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[4] !== 1'bx ) && ( jump_mux_option3_outpin_prev[4] !== jump_mux_option3_outpin_expected_prev[4] )
		&& ((jump_mux_option3_outpin_expected_prev[4] !== last_jump_mux_option3_outpin_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[4] = jump_mux_option3_outpin_expected_prev[4];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[5] !== 1'bx ) && ( jump_mux_option3_outpin_prev[5] !== jump_mux_option3_outpin_expected_prev[5] )
		&& ((jump_mux_option3_outpin_expected_prev[5] !== last_jump_mux_option3_outpin_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[5] = jump_mux_option3_outpin_expected_prev[5];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[6] !== 1'bx ) && ( jump_mux_option3_outpin_prev[6] !== jump_mux_option3_outpin_expected_prev[6] )
		&& ((jump_mux_option3_outpin_expected_prev[6] !== last_jump_mux_option3_outpin_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[6] = jump_mux_option3_outpin_expected_prev[6];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[7] !== 1'bx ) && ( jump_mux_option3_outpin_prev[7] !== jump_mux_option3_outpin_expected_prev[7] )
		&& ((jump_mux_option3_outpin_expected_prev[7] !== last_jump_mux_option3_outpin_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[7] = jump_mux_option3_outpin_expected_prev[7];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[8] !== 1'bx ) && ( jump_mux_option3_outpin_prev[8] !== jump_mux_option3_outpin_expected_prev[8] )
		&& ((jump_mux_option3_outpin_expected_prev[8] !== last_jump_mux_option3_outpin_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[8] = jump_mux_option3_outpin_expected_prev[8];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[9] !== 1'bx ) && ( jump_mux_option3_outpin_prev[9] !== jump_mux_option3_outpin_expected_prev[9] )
		&& ((jump_mux_option3_outpin_expected_prev[9] !== last_jump_mux_option3_outpin_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[9] = jump_mux_option3_outpin_expected_prev[9];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[10] !== 1'bx ) && ( jump_mux_option3_outpin_prev[10] !== jump_mux_option3_outpin_expected_prev[10] )
		&& ((jump_mux_option3_outpin_expected_prev[10] !== last_jump_mux_option3_outpin_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[10] = jump_mux_option3_outpin_expected_prev[10];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[11] !== 1'bx ) && ( jump_mux_option3_outpin_prev[11] !== jump_mux_option3_outpin_expected_prev[11] )
		&& ((jump_mux_option3_outpin_expected_prev[11] !== last_jump_mux_option3_outpin_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[11] = jump_mux_option3_outpin_expected_prev[11];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[12] !== 1'bx ) && ( jump_mux_option3_outpin_prev[12] !== jump_mux_option3_outpin_expected_prev[12] )
		&& ((jump_mux_option3_outpin_expected_prev[12] !== last_jump_mux_option3_outpin_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[12] = jump_mux_option3_outpin_expected_prev[12];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[13] !== 1'bx ) && ( jump_mux_option3_outpin_prev[13] !== jump_mux_option3_outpin_expected_prev[13] )
		&& ((jump_mux_option3_outpin_expected_prev[13] !== last_jump_mux_option3_outpin_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[13] = jump_mux_option3_outpin_expected_prev[13];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[14] !== 1'bx ) && ( jump_mux_option3_outpin_prev[14] !== jump_mux_option3_outpin_expected_prev[14] )
		&& ((jump_mux_option3_outpin_expected_prev[14] !== last_jump_mux_option3_outpin_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[14] = jump_mux_option3_outpin_expected_prev[14];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[15] !== 1'bx ) && ( jump_mux_option3_outpin_prev[15] !== jump_mux_option3_outpin_expected_prev[15] )
		&& ((jump_mux_option3_outpin_expected_prev[15] !== last_jump_mux_option3_outpin_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[15] = jump_mux_option3_outpin_expected_prev[15];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[16] !== 1'bx ) && ( jump_mux_option3_outpin_prev[16] !== jump_mux_option3_outpin_expected_prev[16] )
		&& ((jump_mux_option3_outpin_expected_prev[16] !== last_jump_mux_option3_outpin_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[16] = jump_mux_option3_outpin_expected_prev[16];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[17] !== 1'bx ) && ( jump_mux_option3_outpin_prev[17] !== jump_mux_option3_outpin_expected_prev[17] )
		&& ((jump_mux_option3_outpin_expected_prev[17] !== last_jump_mux_option3_outpin_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[17] = jump_mux_option3_outpin_expected_prev[17];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[18] !== 1'bx ) && ( jump_mux_option3_outpin_prev[18] !== jump_mux_option3_outpin_expected_prev[18] )
		&& ((jump_mux_option3_outpin_expected_prev[18] !== last_jump_mux_option3_outpin_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[18] = jump_mux_option3_outpin_expected_prev[18];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[19] !== 1'bx ) && ( jump_mux_option3_outpin_prev[19] !== jump_mux_option3_outpin_expected_prev[19] )
		&& ((jump_mux_option3_outpin_expected_prev[19] !== last_jump_mux_option3_outpin_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[19] = jump_mux_option3_outpin_expected_prev[19];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[20] !== 1'bx ) && ( jump_mux_option3_outpin_prev[20] !== jump_mux_option3_outpin_expected_prev[20] )
		&& ((jump_mux_option3_outpin_expected_prev[20] !== last_jump_mux_option3_outpin_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[20] = jump_mux_option3_outpin_expected_prev[20];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[21] !== 1'bx ) && ( jump_mux_option3_outpin_prev[21] !== jump_mux_option3_outpin_expected_prev[21] )
		&& ((jump_mux_option3_outpin_expected_prev[21] !== last_jump_mux_option3_outpin_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[21] = jump_mux_option3_outpin_expected_prev[21];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[22] !== 1'bx ) && ( jump_mux_option3_outpin_prev[22] !== jump_mux_option3_outpin_expected_prev[22] )
		&& ((jump_mux_option3_outpin_expected_prev[22] !== last_jump_mux_option3_outpin_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[22] = jump_mux_option3_outpin_expected_prev[22];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[23] !== 1'bx ) && ( jump_mux_option3_outpin_prev[23] !== jump_mux_option3_outpin_expected_prev[23] )
		&& ((jump_mux_option3_outpin_expected_prev[23] !== last_jump_mux_option3_outpin_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[23] = jump_mux_option3_outpin_expected_prev[23];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[24] !== 1'bx ) && ( jump_mux_option3_outpin_prev[24] !== jump_mux_option3_outpin_expected_prev[24] )
		&& ((jump_mux_option3_outpin_expected_prev[24] !== last_jump_mux_option3_outpin_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[24] = jump_mux_option3_outpin_expected_prev[24];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[25] !== 1'bx ) && ( jump_mux_option3_outpin_prev[25] !== jump_mux_option3_outpin_expected_prev[25] )
		&& ((jump_mux_option3_outpin_expected_prev[25] !== last_jump_mux_option3_outpin_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[25] = jump_mux_option3_outpin_expected_prev[25];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[26] !== 1'bx ) && ( jump_mux_option3_outpin_prev[26] !== jump_mux_option3_outpin_expected_prev[26] )
		&& ((jump_mux_option3_outpin_expected_prev[26] !== last_jump_mux_option3_outpin_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[26] = jump_mux_option3_outpin_expected_prev[26];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[27] !== 1'bx ) && ( jump_mux_option3_outpin_prev[27] !== jump_mux_option3_outpin_expected_prev[27] )
		&& ((jump_mux_option3_outpin_expected_prev[27] !== last_jump_mux_option3_outpin_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[27] = jump_mux_option3_outpin_expected_prev[27];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[28] !== 1'bx ) && ( jump_mux_option3_outpin_prev[28] !== jump_mux_option3_outpin_expected_prev[28] )
		&& ((jump_mux_option3_outpin_expected_prev[28] !== last_jump_mux_option3_outpin_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[28] = jump_mux_option3_outpin_expected_prev[28];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[29] !== 1'bx ) && ( jump_mux_option3_outpin_prev[29] !== jump_mux_option3_outpin_expected_prev[29] )
		&& ((jump_mux_option3_outpin_expected_prev[29] !== last_jump_mux_option3_outpin_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[29] = jump_mux_option3_outpin_expected_prev[29];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[30] !== 1'bx ) && ( jump_mux_option3_outpin_prev[30] !== jump_mux_option3_outpin_expected_prev[30] )
		&& ((jump_mux_option3_outpin_expected_prev[30] !== last_jump_mux_option3_outpin_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[30] = jump_mux_option3_outpin_expected_prev[30];
	end
	if (
		( jump_mux_option3_outpin_expected_prev[31] !== 1'bx ) && ( jump_mux_option3_outpin_prev[31] !== jump_mux_option3_outpin_expected_prev[31] )
		&& ((jump_mux_option3_outpin_expected_prev[31] !== last_jump_mux_option3_outpin_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option3_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option3_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option3_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_mux_option3_outpin_exp[31] = jump_mux_option3_outpin_expected_prev[31];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[0] !== 1'bx ) && ( jump_mux_option4_outpin_prev[0] !== jump_mux_option4_outpin_expected_prev[0] )
		&& ((jump_mux_option4_outpin_expected_prev[0] !== last_jump_mux_option4_outpin_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[0] = jump_mux_option4_outpin_expected_prev[0];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[1] !== 1'bx ) && ( jump_mux_option4_outpin_prev[1] !== jump_mux_option4_outpin_expected_prev[1] )
		&& ((jump_mux_option4_outpin_expected_prev[1] !== last_jump_mux_option4_outpin_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[1] = jump_mux_option4_outpin_expected_prev[1];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[2] !== 1'bx ) && ( jump_mux_option4_outpin_prev[2] !== jump_mux_option4_outpin_expected_prev[2] )
		&& ((jump_mux_option4_outpin_expected_prev[2] !== last_jump_mux_option4_outpin_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[2] = jump_mux_option4_outpin_expected_prev[2];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[3] !== 1'bx ) && ( jump_mux_option4_outpin_prev[3] !== jump_mux_option4_outpin_expected_prev[3] )
		&& ((jump_mux_option4_outpin_expected_prev[3] !== last_jump_mux_option4_outpin_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[3] = jump_mux_option4_outpin_expected_prev[3];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[4] !== 1'bx ) && ( jump_mux_option4_outpin_prev[4] !== jump_mux_option4_outpin_expected_prev[4] )
		&& ((jump_mux_option4_outpin_expected_prev[4] !== last_jump_mux_option4_outpin_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[4] = jump_mux_option4_outpin_expected_prev[4];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[5] !== 1'bx ) && ( jump_mux_option4_outpin_prev[5] !== jump_mux_option4_outpin_expected_prev[5] )
		&& ((jump_mux_option4_outpin_expected_prev[5] !== last_jump_mux_option4_outpin_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[5] = jump_mux_option4_outpin_expected_prev[5];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[6] !== 1'bx ) && ( jump_mux_option4_outpin_prev[6] !== jump_mux_option4_outpin_expected_prev[6] )
		&& ((jump_mux_option4_outpin_expected_prev[6] !== last_jump_mux_option4_outpin_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[6] = jump_mux_option4_outpin_expected_prev[6];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[7] !== 1'bx ) && ( jump_mux_option4_outpin_prev[7] !== jump_mux_option4_outpin_expected_prev[7] )
		&& ((jump_mux_option4_outpin_expected_prev[7] !== last_jump_mux_option4_outpin_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[7] = jump_mux_option4_outpin_expected_prev[7];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[8] !== 1'bx ) && ( jump_mux_option4_outpin_prev[8] !== jump_mux_option4_outpin_expected_prev[8] )
		&& ((jump_mux_option4_outpin_expected_prev[8] !== last_jump_mux_option4_outpin_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[8] = jump_mux_option4_outpin_expected_prev[8];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[9] !== 1'bx ) && ( jump_mux_option4_outpin_prev[9] !== jump_mux_option4_outpin_expected_prev[9] )
		&& ((jump_mux_option4_outpin_expected_prev[9] !== last_jump_mux_option4_outpin_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[9] = jump_mux_option4_outpin_expected_prev[9];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[10] !== 1'bx ) && ( jump_mux_option4_outpin_prev[10] !== jump_mux_option4_outpin_expected_prev[10] )
		&& ((jump_mux_option4_outpin_expected_prev[10] !== last_jump_mux_option4_outpin_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[10] = jump_mux_option4_outpin_expected_prev[10];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[11] !== 1'bx ) && ( jump_mux_option4_outpin_prev[11] !== jump_mux_option4_outpin_expected_prev[11] )
		&& ((jump_mux_option4_outpin_expected_prev[11] !== last_jump_mux_option4_outpin_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[11] = jump_mux_option4_outpin_expected_prev[11];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[12] !== 1'bx ) && ( jump_mux_option4_outpin_prev[12] !== jump_mux_option4_outpin_expected_prev[12] )
		&& ((jump_mux_option4_outpin_expected_prev[12] !== last_jump_mux_option4_outpin_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[12] = jump_mux_option4_outpin_expected_prev[12];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[13] !== 1'bx ) && ( jump_mux_option4_outpin_prev[13] !== jump_mux_option4_outpin_expected_prev[13] )
		&& ((jump_mux_option4_outpin_expected_prev[13] !== last_jump_mux_option4_outpin_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[13] = jump_mux_option4_outpin_expected_prev[13];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[14] !== 1'bx ) && ( jump_mux_option4_outpin_prev[14] !== jump_mux_option4_outpin_expected_prev[14] )
		&& ((jump_mux_option4_outpin_expected_prev[14] !== last_jump_mux_option4_outpin_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[14] = jump_mux_option4_outpin_expected_prev[14];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[15] !== 1'bx ) && ( jump_mux_option4_outpin_prev[15] !== jump_mux_option4_outpin_expected_prev[15] )
		&& ((jump_mux_option4_outpin_expected_prev[15] !== last_jump_mux_option4_outpin_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[15] = jump_mux_option4_outpin_expected_prev[15];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[16] !== 1'bx ) && ( jump_mux_option4_outpin_prev[16] !== jump_mux_option4_outpin_expected_prev[16] )
		&& ((jump_mux_option4_outpin_expected_prev[16] !== last_jump_mux_option4_outpin_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[16] = jump_mux_option4_outpin_expected_prev[16];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[17] !== 1'bx ) && ( jump_mux_option4_outpin_prev[17] !== jump_mux_option4_outpin_expected_prev[17] )
		&& ((jump_mux_option4_outpin_expected_prev[17] !== last_jump_mux_option4_outpin_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[17] = jump_mux_option4_outpin_expected_prev[17];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[18] !== 1'bx ) && ( jump_mux_option4_outpin_prev[18] !== jump_mux_option4_outpin_expected_prev[18] )
		&& ((jump_mux_option4_outpin_expected_prev[18] !== last_jump_mux_option4_outpin_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[18] = jump_mux_option4_outpin_expected_prev[18];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[19] !== 1'bx ) && ( jump_mux_option4_outpin_prev[19] !== jump_mux_option4_outpin_expected_prev[19] )
		&& ((jump_mux_option4_outpin_expected_prev[19] !== last_jump_mux_option4_outpin_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[19] = jump_mux_option4_outpin_expected_prev[19];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[20] !== 1'bx ) && ( jump_mux_option4_outpin_prev[20] !== jump_mux_option4_outpin_expected_prev[20] )
		&& ((jump_mux_option4_outpin_expected_prev[20] !== last_jump_mux_option4_outpin_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[20] = jump_mux_option4_outpin_expected_prev[20];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[21] !== 1'bx ) && ( jump_mux_option4_outpin_prev[21] !== jump_mux_option4_outpin_expected_prev[21] )
		&& ((jump_mux_option4_outpin_expected_prev[21] !== last_jump_mux_option4_outpin_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[21] = jump_mux_option4_outpin_expected_prev[21];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[22] !== 1'bx ) && ( jump_mux_option4_outpin_prev[22] !== jump_mux_option4_outpin_expected_prev[22] )
		&& ((jump_mux_option4_outpin_expected_prev[22] !== last_jump_mux_option4_outpin_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[22] = jump_mux_option4_outpin_expected_prev[22];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[23] !== 1'bx ) && ( jump_mux_option4_outpin_prev[23] !== jump_mux_option4_outpin_expected_prev[23] )
		&& ((jump_mux_option4_outpin_expected_prev[23] !== last_jump_mux_option4_outpin_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[23] = jump_mux_option4_outpin_expected_prev[23];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[24] !== 1'bx ) && ( jump_mux_option4_outpin_prev[24] !== jump_mux_option4_outpin_expected_prev[24] )
		&& ((jump_mux_option4_outpin_expected_prev[24] !== last_jump_mux_option4_outpin_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[24] = jump_mux_option4_outpin_expected_prev[24];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[25] !== 1'bx ) && ( jump_mux_option4_outpin_prev[25] !== jump_mux_option4_outpin_expected_prev[25] )
		&& ((jump_mux_option4_outpin_expected_prev[25] !== last_jump_mux_option4_outpin_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[25] = jump_mux_option4_outpin_expected_prev[25];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[26] !== 1'bx ) && ( jump_mux_option4_outpin_prev[26] !== jump_mux_option4_outpin_expected_prev[26] )
		&& ((jump_mux_option4_outpin_expected_prev[26] !== last_jump_mux_option4_outpin_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[26] = jump_mux_option4_outpin_expected_prev[26];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[27] !== 1'bx ) && ( jump_mux_option4_outpin_prev[27] !== jump_mux_option4_outpin_expected_prev[27] )
		&& ((jump_mux_option4_outpin_expected_prev[27] !== last_jump_mux_option4_outpin_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[27] = jump_mux_option4_outpin_expected_prev[27];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[28] !== 1'bx ) && ( jump_mux_option4_outpin_prev[28] !== jump_mux_option4_outpin_expected_prev[28] )
		&& ((jump_mux_option4_outpin_expected_prev[28] !== last_jump_mux_option4_outpin_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[28] = jump_mux_option4_outpin_expected_prev[28];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[29] !== 1'bx ) && ( jump_mux_option4_outpin_prev[29] !== jump_mux_option4_outpin_expected_prev[29] )
		&& ((jump_mux_option4_outpin_expected_prev[29] !== last_jump_mux_option4_outpin_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[29] = jump_mux_option4_outpin_expected_prev[29];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[30] !== 1'bx ) && ( jump_mux_option4_outpin_prev[30] !== jump_mux_option4_outpin_expected_prev[30] )
		&& ((jump_mux_option4_outpin_expected_prev[30] !== last_jump_mux_option4_outpin_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[30] = jump_mux_option4_outpin_expected_prev[30];
	end
	if (
		( jump_mux_option4_outpin_expected_prev[31] !== 1'bx ) && ( jump_mux_option4_outpin_prev[31] !== jump_mux_option4_outpin_expected_prev[31] )
		&& ((jump_mux_option4_outpin_expected_prev[31] !== last_jump_mux_option4_outpin_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_option4_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_option4_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_option4_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_mux_option4_outpin_exp[31] = jump_mux_option4_outpin_expected_prev[31];
	end
	if (
		( jump_mux_select_outpin_expected_prev[0] !== 1'bx ) && ( jump_mux_select_outpin_prev[0] !== jump_mux_select_outpin_expected_prev[0] )
		&& ((jump_mux_select_outpin_expected_prev[0] !== last_jump_mux_select_outpin_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_select_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_select_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_select_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_jump_mux_select_outpin_exp[0] = jump_mux_select_outpin_expected_prev[0];
	end
	if (
		( jump_mux_select_outpin_expected_prev[1] !== 1'bx ) && ( jump_mux_select_outpin_prev[1] !== jump_mux_select_outpin_expected_prev[1] )
		&& ((jump_mux_select_outpin_expected_prev[1] !== last_jump_mux_select_outpin_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump_mux_select_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_mux_select_outpin_expected_prev);
		$display ("     Real value = %b", jump_mux_select_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_jump_mux_select_outpin_exp[1] = jump_mux_select_outpin_expected_prev[1];
	end
	if (
		( pc_enable_pin_expected_prev !== 1'bx ) && ( pc_enable_pin_prev !== pc_enable_pin_expected_prev )
		&& ((pc_enable_pin_expected_prev !== last_pc_enable_pin_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_enable_pin :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_enable_pin_expected_prev);
		$display ("     Real value = %b", pc_enable_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_enable_pin_exp = pc_enable_pin_expected_prev;
	end
	if (
		( pc_input_pin_expected_prev[0] !== 1'bx ) && ( pc_input_pin_prev[0] !== pc_input_pin_expected_prev[0] )
		&& ((pc_input_pin_expected_prev[0] !== last_pc_input_pin_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[0] = pc_input_pin_expected_prev[0];
	end
	if (
		( pc_input_pin_expected_prev[1] !== 1'bx ) && ( pc_input_pin_prev[1] !== pc_input_pin_expected_prev[1] )
		&& ((pc_input_pin_expected_prev[1] !== last_pc_input_pin_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[1] = pc_input_pin_expected_prev[1];
	end
	if (
		( pc_input_pin_expected_prev[2] !== 1'bx ) && ( pc_input_pin_prev[2] !== pc_input_pin_expected_prev[2] )
		&& ((pc_input_pin_expected_prev[2] !== last_pc_input_pin_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[2] = pc_input_pin_expected_prev[2];
	end
	if (
		( pc_input_pin_expected_prev[3] !== 1'bx ) && ( pc_input_pin_prev[3] !== pc_input_pin_expected_prev[3] )
		&& ((pc_input_pin_expected_prev[3] !== last_pc_input_pin_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[3] = pc_input_pin_expected_prev[3];
	end
	if (
		( pc_input_pin_expected_prev[4] !== 1'bx ) && ( pc_input_pin_prev[4] !== pc_input_pin_expected_prev[4] )
		&& ((pc_input_pin_expected_prev[4] !== last_pc_input_pin_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[4] = pc_input_pin_expected_prev[4];
	end
	if (
		( pc_input_pin_expected_prev[5] !== 1'bx ) && ( pc_input_pin_prev[5] !== pc_input_pin_expected_prev[5] )
		&& ((pc_input_pin_expected_prev[5] !== last_pc_input_pin_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[5] = pc_input_pin_expected_prev[5];
	end
	if (
		( pc_input_pin_expected_prev[6] !== 1'bx ) && ( pc_input_pin_prev[6] !== pc_input_pin_expected_prev[6] )
		&& ((pc_input_pin_expected_prev[6] !== last_pc_input_pin_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[6] = pc_input_pin_expected_prev[6];
	end
	if (
		( pc_input_pin_expected_prev[7] !== 1'bx ) && ( pc_input_pin_prev[7] !== pc_input_pin_expected_prev[7] )
		&& ((pc_input_pin_expected_prev[7] !== last_pc_input_pin_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[7] = pc_input_pin_expected_prev[7];
	end
	if (
		( pc_input_pin_expected_prev[8] !== 1'bx ) && ( pc_input_pin_prev[8] !== pc_input_pin_expected_prev[8] )
		&& ((pc_input_pin_expected_prev[8] !== last_pc_input_pin_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[8] = pc_input_pin_expected_prev[8];
	end
	if (
		( pc_input_pin_expected_prev[9] !== 1'bx ) && ( pc_input_pin_prev[9] !== pc_input_pin_expected_prev[9] )
		&& ((pc_input_pin_expected_prev[9] !== last_pc_input_pin_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[9] = pc_input_pin_expected_prev[9];
	end
	if (
		( pc_input_pin_expected_prev[10] !== 1'bx ) && ( pc_input_pin_prev[10] !== pc_input_pin_expected_prev[10] )
		&& ((pc_input_pin_expected_prev[10] !== last_pc_input_pin_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[10] = pc_input_pin_expected_prev[10];
	end
	if (
		( pc_input_pin_expected_prev[11] !== 1'bx ) && ( pc_input_pin_prev[11] !== pc_input_pin_expected_prev[11] )
		&& ((pc_input_pin_expected_prev[11] !== last_pc_input_pin_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[11] = pc_input_pin_expected_prev[11];
	end
	if (
		( pc_input_pin_expected_prev[12] !== 1'bx ) && ( pc_input_pin_prev[12] !== pc_input_pin_expected_prev[12] )
		&& ((pc_input_pin_expected_prev[12] !== last_pc_input_pin_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[12] = pc_input_pin_expected_prev[12];
	end
	if (
		( pc_input_pin_expected_prev[13] !== 1'bx ) && ( pc_input_pin_prev[13] !== pc_input_pin_expected_prev[13] )
		&& ((pc_input_pin_expected_prev[13] !== last_pc_input_pin_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[13] = pc_input_pin_expected_prev[13];
	end
	if (
		( pc_input_pin_expected_prev[14] !== 1'bx ) && ( pc_input_pin_prev[14] !== pc_input_pin_expected_prev[14] )
		&& ((pc_input_pin_expected_prev[14] !== last_pc_input_pin_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[14] = pc_input_pin_expected_prev[14];
	end
	if (
		( pc_input_pin_expected_prev[15] !== 1'bx ) && ( pc_input_pin_prev[15] !== pc_input_pin_expected_prev[15] )
		&& ((pc_input_pin_expected_prev[15] !== last_pc_input_pin_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[15] = pc_input_pin_expected_prev[15];
	end
	if (
		( pc_input_pin_expected_prev[16] !== 1'bx ) && ( pc_input_pin_prev[16] !== pc_input_pin_expected_prev[16] )
		&& ((pc_input_pin_expected_prev[16] !== last_pc_input_pin_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[16] = pc_input_pin_expected_prev[16];
	end
	if (
		( pc_input_pin_expected_prev[17] !== 1'bx ) && ( pc_input_pin_prev[17] !== pc_input_pin_expected_prev[17] )
		&& ((pc_input_pin_expected_prev[17] !== last_pc_input_pin_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[17] = pc_input_pin_expected_prev[17];
	end
	if (
		( pc_input_pin_expected_prev[18] !== 1'bx ) && ( pc_input_pin_prev[18] !== pc_input_pin_expected_prev[18] )
		&& ((pc_input_pin_expected_prev[18] !== last_pc_input_pin_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[18] = pc_input_pin_expected_prev[18];
	end
	if (
		( pc_input_pin_expected_prev[19] !== 1'bx ) && ( pc_input_pin_prev[19] !== pc_input_pin_expected_prev[19] )
		&& ((pc_input_pin_expected_prev[19] !== last_pc_input_pin_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[19] = pc_input_pin_expected_prev[19];
	end
	if (
		( pc_input_pin_expected_prev[20] !== 1'bx ) && ( pc_input_pin_prev[20] !== pc_input_pin_expected_prev[20] )
		&& ((pc_input_pin_expected_prev[20] !== last_pc_input_pin_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[20] = pc_input_pin_expected_prev[20];
	end
	if (
		( pc_input_pin_expected_prev[21] !== 1'bx ) && ( pc_input_pin_prev[21] !== pc_input_pin_expected_prev[21] )
		&& ((pc_input_pin_expected_prev[21] !== last_pc_input_pin_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[21] = pc_input_pin_expected_prev[21];
	end
	if (
		( pc_input_pin_expected_prev[22] !== 1'bx ) && ( pc_input_pin_prev[22] !== pc_input_pin_expected_prev[22] )
		&& ((pc_input_pin_expected_prev[22] !== last_pc_input_pin_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[22] = pc_input_pin_expected_prev[22];
	end
	if (
		( pc_input_pin_expected_prev[23] !== 1'bx ) && ( pc_input_pin_prev[23] !== pc_input_pin_expected_prev[23] )
		&& ((pc_input_pin_expected_prev[23] !== last_pc_input_pin_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[23] = pc_input_pin_expected_prev[23];
	end
	if (
		( pc_input_pin_expected_prev[24] !== 1'bx ) && ( pc_input_pin_prev[24] !== pc_input_pin_expected_prev[24] )
		&& ((pc_input_pin_expected_prev[24] !== last_pc_input_pin_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[24] = pc_input_pin_expected_prev[24];
	end
	if (
		( pc_input_pin_expected_prev[25] !== 1'bx ) && ( pc_input_pin_prev[25] !== pc_input_pin_expected_prev[25] )
		&& ((pc_input_pin_expected_prev[25] !== last_pc_input_pin_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[25] = pc_input_pin_expected_prev[25];
	end
	if (
		( pc_input_pin_expected_prev[26] !== 1'bx ) && ( pc_input_pin_prev[26] !== pc_input_pin_expected_prev[26] )
		&& ((pc_input_pin_expected_prev[26] !== last_pc_input_pin_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[26] = pc_input_pin_expected_prev[26];
	end
	if (
		( pc_input_pin_expected_prev[27] !== 1'bx ) && ( pc_input_pin_prev[27] !== pc_input_pin_expected_prev[27] )
		&& ((pc_input_pin_expected_prev[27] !== last_pc_input_pin_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[27] = pc_input_pin_expected_prev[27];
	end
	if (
		( pc_input_pin_expected_prev[28] !== 1'bx ) && ( pc_input_pin_prev[28] !== pc_input_pin_expected_prev[28] )
		&& ((pc_input_pin_expected_prev[28] !== last_pc_input_pin_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[28] = pc_input_pin_expected_prev[28];
	end
	if (
		( pc_input_pin_expected_prev[29] !== 1'bx ) && ( pc_input_pin_prev[29] !== pc_input_pin_expected_prev[29] )
		&& ((pc_input_pin_expected_prev[29] !== last_pc_input_pin_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[29] = pc_input_pin_expected_prev[29];
	end
	if (
		( pc_input_pin_expected_prev[30] !== 1'bx ) && ( pc_input_pin_prev[30] !== pc_input_pin_expected_prev[30] )
		&& ((pc_input_pin_expected_prev[30] !== last_pc_input_pin_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[30] = pc_input_pin_expected_prev[30];
	end
	if (
		( pc_input_pin_expected_prev[31] !== 1'bx ) && ( pc_input_pin_prev[31] !== pc_input_pin_expected_prev[31] )
		&& ((pc_input_pin_expected_prev[31] !== last_pc_input_pin_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_input_pin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_input_pin_expected_prev);
		$display ("     Real value = %b", pc_input_pin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_input_pin_exp[31] = pc_input_pin_expected_prev[31];
	end
	if (
		( pcpin2_expected_prev[0] !== 1'bx ) && ( pcpin2_prev[0] !== pcpin2_expected_prev[0] )
		&& ((pcpin2_expected_prev[0] !== last_pcpin2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[0] = pcpin2_expected_prev[0];
	end
	if (
		( pcpin2_expected_prev[1] !== 1'bx ) && ( pcpin2_prev[1] !== pcpin2_expected_prev[1] )
		&& ((pcpin2_expected_prev[1] !== last_pcpin2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[1] = pcpin2_expected_prev[1];
	end
	if (
		( pcpin2_expected_prev[2] !== 1'bx ) && ( pcpin2_prev[2] !== pcpin2_expected_prev[2] )
		&& ((pcpin2_expected_prev[2] !== last_pcpin2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[2] = pcpin2_expected_prev[2];
	end
	if (
		( pcpin2_expected_prev[3] !== 1'bx ) && ( pcpin2_prev[3] !== pcpin2_expected_prev[3] )
		&& ((pcpin2_expected_prev[3] !== last_pcpin2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[3] = pcpin2_expected_prev[3];
	end
	if (
		( pcpin2_expected_prev[4] !== 1'bx ) && ( pcpin2_prev[4] !== pcpin2_expected_prev[4] )
		&& ((pcpin2_expected_prev[4] !== last_pcpin2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[4] = pcpin2_expected_prev[4];
	end
	if (
		( pcpin2_expected_prev[5] !== 1'bx ) && ( pcpin2_prev[5] !== pcpin2_expected_prev[5] )
		&& ((pcpin2_expected_prev[5] !== last_pcpin2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[5] = pcpin2_expected_prev[5];
	end
	if (
		( pcpin2_expected_prev[6] !== 1'bx ) && ( pcpin2_prev[6] !== pcpin2_expected_prev[6] )
		&& ((pcpin2_expected_prev[6] !== last_pcpin2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[6] = pcpin2_expected_prev[6];
	end
	if (
		( pcpin2_expected_prev[7] !== 1'bx ) && ( pcpin2_prev[7] !== pcpin2_expected_prev[7] )
		&& ((pcpin2_expected_prev[7] !== last_pcpin2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[7] = pcpin2_expected_prev[7];
	end
	if (
		( pcpin2_expected_prev[8] !== 1'bx ) && ( pcpin2_prev[8] !== pcpin2_expected_prev[8] )
		&& ((pcpin2_expected_prev[8] !== last_pcpin2_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[8] = pcpin2_expected_prev[8];
	end
	if (
		( pcpin2_expected_prev[9] !== 1'bx ) && ( pcpin2_prev[9] !== pcpin2_expected_prev[9] )
		&& ((pcpin2_expected_prev[9] !== last_pcpin2_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[9] = pcpin2_expected_prev[9];
	end
	if (
		( pcpin2_expected_prev[10] !== 1'bx ) && ( pcpin2_prev[10] !== pcpin2_expected_prev[10] )
		&& ((pcpin2_expected_prev[10] !== last_pcpin2_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[10] = pcpin2_expected_prev[10];
	end
	if (
		( pcpin2_expected_prev[11] !== 1'bx ) && ( pcpin2_prev[11] !== pcpin2_expected_prev[11] )
		&& ((pcpin2_expected_prev[11] !== last_pcpin2_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[11] = pcpin2_expected_prev[11];
	end
	if (
		( pcpin2_expected_prev[12] !== 1'bx ) && ( pcpin2_prev[12] !== pcpin2_expected_prev[12] )
		&& ((pcpin2_expected_prev[12] !== last_pcpin2_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[12] = pcpin2_expected_prev[12];
	end
	if (
		( pcpin2_expected_prev[13] !== 1'bx ) && ( pcpin2_prev[13] !== pcpin2_expected_prev[13] )
		&& ((pcpin2_expected_prev[13] !== last_pcpin2_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[13] = pcpin2_expected_prev[13];
	end
	if (
		( pcpin2_expected_prev[14] !== 1'bx ) && ( pcpin2_prev[14] !== pcpin2_expected_prev[14] )
		&& ((pcpin2_expected_prev[14] !== last_pcpin2_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[14] = pcpin2_expected_prev[14];
	end
	if (
		( pcpin2_expected_prev[15] !== 1'bx ) && ( pcpin2_prev[15] !== pcpin2_expected_prev[15] )
		&& ((pcpin2_expected_prev[15] !== last_pcpin2_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[15] = pcpin2_expected_prev[15];
	end
	if (
		( pcpin2_expected_prev[16] !== 1'bx ) && ( pcpin2_prev[16] !== pcpin2_expected_prev[16] )
		&& ((pcpin2_expected_prev[16] !== last_pcpin2_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[16] = pcpin2_expected_prev[16];
	end
	if (
		( pcpin2_expected_prev[17] !== 1'bx ) && ( pcpin2_prev[17] !== pcpin2_expected_prev[17] )
		&& ((pcpin2_expected_prev[17] !== last_pcpin2_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[17] = pcpin2_expected_prev[17];
	end
	if (
		( pcpin2_expected_prev[18] !== 1'bx ) && ( pcpin2_prev[18] !== pcpin2_expected_prev[18] )
		&& ((pcpin2_expected_prev[18] !== last_pcpin2_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[18] = pcpin2_expected_prev[18];
	end
	if (
		( pcpin2_expected_prev[19] !== 1'bx ) && ( pcpin2_prev[19] !== pcpin2_expected_prev[19] )
		&& ((pcpin2_expected_prev[19] !== last_pcpin2_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[19] = pcpin2_expected_prev[19];
	end
	if (
		( pcpin2_expected_prev[20] !== 1'bx ) && ( pcpin2_prev[20] !== pcpin2_expected_prev[20] )
		&& ((pcpin2_expected_prev[20] !== last_pcpin2_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[20] = pcpin2_expected_prev[20];
	end
	if (
		( pcpin2_expected_prev[21] !== 1'bx ) && ( pcpin2_prev[21] !== pcpin2_expected_prev[21] )
		&& ((pcpin2_expected_prev[21] !== last_pcpin2_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[21] = pcpin2_expected_prev[21];
	end
	if (
		( pcpin2_expected_prev[22] !== 1'bx ) && ( pcpin2_prev[22] !== pcpin2_expected_prev[22] )
		&& ((pcpin2_expected_prev[22] !== last_pcpin2_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[22] = pcpin2_expected_prev[22];
	end
	if (
		( pcpin2_expected_prev[23] !== 1'bx ) && ( pcpin2_prev[23] !== pcpin2_expected_prev[23] )
		&& ((pcpin2_expected_prev[23] !== last_pcpin2_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[23] = pcpin2_expected_prev[23];
	end
	if (
		( pcpin2_expected_prev[24] !== 1'bx ) && ( pcpin2_prev[24] !== pcpin2_expected_prev[24] )
		&& ((pcpin2_expected_prev[24] !== last_pcpin2_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[24] = pcpin2_expected_prev[24];
	end
	if (
		( pcpin2_expected_prev[25] !== 1'bx ) && ( pcpin2_prev[25] !== pcpin2_expected_prev[25] )
		&& ((pcpin2_expected_prev[25] !== last_pcpin2_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[25] = pcpin2_expected_prev[25];
	end
	if (
		( pcpin2_expected_prev[26] !== 1'bx ) && ( pcpin2_prev[26] !== pcpin2_expected_prev[26] )
		&& ((pcpin2_expected_prev[26] !== last_pcpin2_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[26] = pcpin2_expected_prev[26];
	end
	if (
		( pcpin2_expected_prev[27] !== 1'bx ) && ( pcpin2_prev[27] !== pcpin2_expected_prev[27] )
		&& ((pcpin2_expected_prev[27] !== last_pcpin2_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[27] = pcpin2_expected_prev[27];
	end
	if (
		( pcpin2_expected_prev[28] !== 1'bx ) && ( pcpin2_prev[28] !== pcpin2_expected_prev[28] )
		&& ((pcpin2_expected_prev[28] !== last_pcpin2_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[28] = pcpin2_expected_prev[28];
	end
	if (
		( pcpin2_expected_prev[29] !== 1'bx ) && ( pcpin2_prev[29] !== pcpin2_expected_prev[29] )
		&& ((pcpin2_expected_prev[29] !== last_pcpin2_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[29] = pcpin2_expected_prev[29];
	end
	if (
		( pcpin2_expected_prev[30] !== 1'bx ) && ( pcpin2_prev[30] !== pcpin2_expected_prev[30] )
		&& ((pcpin2_expected_prev[30] !== last_pcpin2_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[30] = pcpin2_expected_prev[30];
	end
	if (
		( pcpin2_expected_prev[31] !== 1'bx ) && ( pcpin2_prev[31] !== pcpin2_expected_prev[31] )
		&& ((pcpin2_expected_prev[31] !== last_pcpin2_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcpin2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcpin2_expected_prev);
		$display ("     Real value = %b", pcpin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pcpin2_exp[31] = pcpin2_expected_prev[31];
	end
	if (
		( reg1_outpin_expected_prev[0] !== 1'bx ) && ( reg1_outpin_prev[0] !== reg1_outpin_expected_prev[0] )
		&& ((reg1_outpin_expected_prev[0] !== last_reg1_outpin_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[0] = reg1_outpin_expected_prev[0];
	end
	if (
		( reg1_outpin_expected_prev[1] !== 1'bx ) && ( reg1_outpin_prev[1] !== reg1_outpin_expected_prev[1] )
		&& ((reg1_outpin_expected_prev[1] !== last_reg1_outpin_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[1] = reg1_outpin_expected_prev[1];
	end
	if (
		( reg1_outpin_expected_prev[2] !== 1'bx ) && ( reg1_outpin_prev[2] !== reg1_outpin_expected_prev[2] )
		&& ((reg1_outpin_expected_prev[2] !== last_reg1_outpin_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[2] = reg1_outpin_expected_prev[2];
	end
	if (
		( reg1_outpin_expected_prev[3] !== 1'bx ) && ( reg1_outpin_prev[3] !== reg1_outpin_expected_prev[3] )
		&& ((reg1_outpin_expected_prev[3] !== last_reg1_outpin_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[3] = reg1_outpin_expected_prev[3];
	end
	if (
		( reg1_outpin_expected_prev[4] !== 1'bx ) && ( reg1_outpin_prev[4] !== reg1_outpin_expected_prev[4] )
		&& ((reg1_outpin_expected_prev[4] !== last_reg1_outpin_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[4] = reg1_outpin_expected_prev[4];
	end
	if (
		( reg1_outpin_expected_prev[5] !== 1'bx ) && ( reg1_outpin_prev[5] !== reg1_outpin_expected_prev[5] )
		&& ((reg1_outpin_expected_prev[5] !== last_reg1_outpin_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[5] = reg1_outpin_expected_prev[5];
	end
	if (
		( reg1_outpin_expected_prev[6] !== 1'bx ) && ( reg1_outpin_prev[6] !== reg1_outpin_expected_prev[6] )
		&& ((reg1_outpin_expected_prev[6] !== last_reg1_outpin_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[6] = reg1_outpin_expected_prev[6];
	end
	if (
		( reg1_outpin_expected_prev[7] !== 1'bx ) && ( reg1_outpin_prev[7] !== reg1_outpin_expected_prev[7] )
		&& ((reg1_outpin_expected_prev[7] !== last_reg1_outpin_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[7] = reg1_outpin_expected_prev[7];
	end
	if (
		( reg1_outpin_expected_prev[8] !== 1'bx ) && ( reg1_outpin_prev[8] !== reg1_outpin_expected_prev[8] )
		&& ((reg1_outpin_expected_prev[8] !== last_reg1_outpin_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[8] = reg1_outpin_expected_prev[8];
	end
	if (
		( reg1_outpin_expected_prev[9] !== 1'bx ) && ( reg1_outpin_prev[9] !== reg1_outpin_expected_prev[9] )
		&& ((reg1_outpin_expected_prev[9] !== last_reg1_outpin_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[9] = reg1_outpin_expected_prev[9];
	end
	if (
		( reg1_outpin_expected_prev[10] !== 1'bx ) && ( reg1_outpin_prev[10] !== reg1_outpin_expected_prev[10] )
		&& ((reg1_outpin_expected_prev[10] !== last_reg1_outpin_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[10] = reg1_outpin_expected_prev[10];
	end
	if (
		( reg1_outpin_expected_prev[11] !== 1'bx ) && ( reg1_outpin_prev[11] !== reg1_outpin_expected_prev[11] )
		&& ((reg1_outpin_expected_prev[11] !== last_reg1_outpin_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[11] = reg1_outpin_expected_prev[11];
	end
	if (
		( reg1_outpin_expected_prev[12] !== 1'bx ) && ( reg1_outpin_prev[12] !== reg1_outpin_expected_prev[12] )
		&& ((reg1_outpin_expected_prev[12] !== last_reg1_outpin_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[12] = reg1_outpin_expected_prev[12];
	end
	if (
		( reg1_outpin_expected_prev[13] !== 1'bx ) && ( reg1_outpin_prev[13] !== reg1_outpin_expected_prev[13] )
		&& ((reg1_outpin_expected_prev[13] !== last_reg1_outpin_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[13] = reg1_outpin_expected_prev[13];
	end
	if (
		( reg1_outpin_expected_prev[14] !== 1'bx ) && ( reg1_outpin_prev[14] !== reg1_outpin_expected_prev[14] )
		&& ((reg1_outpin_expected_prev[14] !== last_reg1_outpin_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[14] = reg1_outpin_expected_prev[14];
	end
	if (
		( reg1_outpin_expected_prev[15] !== 1'bx ) && ( reg1_outpin_prev[15] !== reg1_outpin_expected_prev[15] )
		&& ((reg1_outpin_expected_prev[15] !== last_reg1_outpin_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[15] = reg1_outpin_expected_prev[15];
	end
	if (
		( reg1_outpin_expected_prev[16] !== 1'bx ) && ( reg1_outpin_prev[16] !== reg1_outpin_expected_prev[16] )
		&& ((reg1_outpin_expected_prev[16] !== last_reg1_outpin_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[16] = reg1_outpin_expected_prev[16];
	end
	if (
		( reg1_outpin_expected_prev[17] !== 1'bx ) && ( reg1_outpin_prev[17] !== reg1_outpin_expected_prev[17] )
		&& ((reg1_outpin_expected_prev[17] !== last_reg1_outpin_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[17] = reg1_outpin_expected_prev[17];
	end
	if (
		( reg1_outpin_expected_prev[18] !== 1'bx ) && ( reg1_outpin_prev[18] !== reg1_outpin_expected_prev[18] )
		&& ((reg1_outpin_expected_prev[18] !== last_reg1_outpin_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[18] = reg1_outpin_expected_prev[18];
	end
	if (
		( reg1_outpin_expected_prev[19] !== 1'bx ) && ( reg1_outpin_prev[19] !== reg1_outpin_expected_prev[19] )
		&& ((reg1_outpin_expected_prev[19] !== last_reg1_outpin_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[19] = reg1_outpin_expected_prev[19];
	end
	if (
		( reg1_outpin_expected_prev[20] !== 1'bx ) && ( reg1_outpin_prev[20] !== reg1_outpin_expected_prev[20] )
		&& ((reg1_outpin_expected_prev[20] !== last_reg1_outpin_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[20] = reg1_outpin_expected_prev[20];
	end
	if (
		( reg1_outpin_expected_prev[21] !== 1'bx ) && ( reg1_outpin_prev[21] !== reg1_outpin_expected_prev[21] )
		&& ((reg1_outpin_expected_prev[21] !== last_reg1_outpin_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[21] = reg1_outpin_expected_prev[21];
	end
	if (
		( reg1_outpin_expected_prev[22] !== 1'bx ) && ( reg1_outpin_prev[22] !== reg1_outpin_expected_prev[22] )
		&& ((reg1_outpin_expected_prev[22] !== last_reg1_outpin_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[22] = reg1_outpin_expected_prev[22];
	end
	if (
		( reg1_outpin_expected_prev[23] !== 1'bx ) && ( reg1_outpin_prev[23] !== reg1_outpin_expected_prev[23] )
		&& ((reg1_outpin_expected_prev[23] !== last_reg1_outpin_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[23] = reg1_outpin_expected_prev[23];
	end
	if (
		( reg1_outpin_expected_prev[24] !== 1'bx ) && ( reg1_outpin_prev[24] !== reg1_outpin_expected_prev[24] )
		&& ((reg1_outpin_expected_prev[24] !== last_reg1_outpin_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[24] = reg1_outpin_expected_prev[24];
	end
	if (
		( reg1_outpin_expected_prev[25] !== 1'bx ) && ( reg1_outpin_prev[25] !== reg1_outpin_expected_prev[25] )
		&& ((reg1_outpin_expected_prev[25] !== last_reg1_outpin_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[25] = reg1_outpin_expected_prev[25];
	end
	if (
		( reg1_outpin_expected_prev[26] !== 1'bx ) && ( reg1_outpin_prev[26] !== reg1_outpin_expected_prev[26] )
		&& ((reg1_outpin_expected_prev[26] !== last_reg1_outpin_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[26] = reg1_outpin_expected_prev[26];
	end
	if (
		( reg1_outpin_expected_prev[27] !== 1'bx ) && ( reg1_outpin_prev[27] !== reg1_outpin_expected_prev[27] )
		&& ((reg1_outpin_expected_prev[27] !== last_reg1_outpin_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[27] = reg1_outpin_expected_prev[27];
	end
	if (
		( reg1_outpin_expected_prev[28] !== 1'bx ) && ( reg1_outpin_prev[28] !== reg1_outpin_expected_prev[28] )
		&& ((reg1_outpin_expected_prev[28] !== last_reg1_outpin_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[28] = reg1_outpin_expected_prev[28];
	end
	if (
		( reg1_outpin_expected_prev[29] !== 1'bx ) && ( reg1_outpin_prev[29] !== reg1_outpin_expected_prev[29] )
		&& ((reg1_outpin_expected_prev[29] !== last_reg1_outpin_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[29] = reg1_outpin_expected_prev[29];
	end
	if (
		( reg1_outpin_expected_prev[30] !== 1'bx ) && ( reg1_outpin_prev[30] !== reg1_outpin_expected_prev[30] )
		&& ((reg1_outpin_expected_prev[30] !== last_reg1_outpin_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[30] = reg1_outpin_expected_prev[30];
	end
	if (
		( reg1_outpin_expected_prev[31] !== 1'bx ) && ( reg1_outpin_prev[31] !== reg1_outpin_expected_prev[31] )
		&& ((reg1_outpin_expected_prev[31] !== last_reg1_outpin_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1_outpin_expected_prev);
		$display ("     Real value = %b", reg1_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_reg1_outpin_exp[31] = reg1_outpin_expected_prev[31];
	end
	if (
		( reg1address_outpin_expected_prev[0] !== 1'bx ) && ( reg1address_outpin_prev[0] !== reg1address_outpin_expected_prev[0] )
		&& ((reg1address_outpin_expected_prev[0] !== last_reg1address_outpin_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1address_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1address_outpin_expected_prev);
		$display ("     Real value = %b", reg1address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_reg1address_outpin_exp[0] = reg1address_outpin_expected_prev[0];
	end
	if (
		( reg1address_outpin_expected_prev[1] !== 1'bx ) && ( reg1address_outpin_prev[1] !== reg1address_outpin_expected_prev[1] )
		&& ((reg1address_outpin_expected_prev[1] !== last_reg1address_outpin_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1address_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1address_outpin_expected_prev);
		$display ("     Real value = %b", reg1address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_reg1address_outpin_exp[1] = reg1address_outpin_expected_prev[1];
	end
	if (
		( reg1address_outpin_expected_prev[2] !== 1'bx ) && ( reg1address_outpin_prev[2] !== reg1address_outpin_expected_prev[2] )
		&& ((reg1address_outpin_expected_prev[2] !== last_reg1address_outpin_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1address_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1address_outpin_expected_prev);
		$display ("     Real value = %b", reg1address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_reg1address_outpin_exp[2] = reg1address_outpin_expected_prev[2];
	end
	if (
		( reg1address_outpin_expected_prev[3] !== 1'bx ) && ( reg1address_outpin_prev[3] !== reg1address_outpin_expected_prev[3] )
		&& ((reg1address_outpin_expected_prev[3] !== last_reg1address_outpin_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1address_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1address_outpin_expected_prev);
		$display ("     Real value = %b", reg1address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_reg1address_outpin_exp[3] = reg1address_outpin_expected_prev[3];
	end
	if (
		( reg1address_outpin_expected_prev[4] !== 1'bx ) && ( reg1address_outpin_prev[4] !== reg1address_outpin_expected_prev[4] )
		&& ((reg1address_outpin_expected_prev[4] !== last_reg1address_outpin_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg1address_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg1address_outpin_expected_prev);
		$display ("     Real value = %b", reg1address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_reg1address_outpin_exp[4] = reg1address_outpin_expected_prev[4];
	end
	if (
		( reg2_outpin_expected_prev[0] !== 1'bx ) && ( reg2_outpin_prev[0] !== reg2_outpin_expected_prev[0] )
		&& ((reg2_outpin_expected_prev[0] !== last_reg2_outpin_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[0] = reg2_outpin_expected_prev[0];
	end
	if (
		( reg2_outpin_expected_prev[1] !== 1'bx ) && ( reg2_outpin_prev[1] !== reg2_outpin_expected_prev[1] )
		&& ((reg2_outpin_expected_prev[1] !== last_reg2_outpin_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[1] = reg2_outpin_expected_prev[1];
	end
	if (
		( reg2_outpin_expected_prev[2] !== 1'bx ) && ( reg2_outpin_prev[2] !== reg2_outpin_expected_prev[2] )
		&& ((reg2_outpin_expected_prev[2] !== last_reg2_outpin_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[2] = reg2_outpin_expected_prev[2];
	end
	if (
		( reg2_outpin_expected_prev[3] !== 1'bx ) && ( reg2_outpin_prev[3] !== reg2_outpin_expected_prev[3] )
		&& ((reg2_outpin_expected_prev[3] !== last_reg2_outpin_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[3] = reg2_outpin_expected_prev[3];
	end
	if (
		( reg2_outpin_expected_prev[4] !== 1'bx ) && ( reg2_outpin_prev[4] !== reg2_outpin_expected_prev[4] )
		&& ((reg2_outpin_expected_prev[4] !== last_reg2_outpin_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[4] = reg2_outpin_expected_prev[4];
	end
	if (
		( reg2_outpin_expected_prev[5] !== 1'bx ) && ( reg2_outpin_prev[5] !== reg2_outpin_expected_prev[5] )
		&& ((reg2_outpin_expected_prev[5] !== last_reg2_outpin_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[5] = reg2_outpin_expected_prev[5];
	end
	if (
		( reg2_outpin_expected_prev[6] !== 1'bx ) && ( reg2_outpin_prev[6] !== reg2_outpin_expected_prev[6] )
		&& ((reg2_outpin_expected_prev[6] !== last_reg2_outpin_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[6] = reg2_outpin_expected_prev[6];
	end
	if (
		( reg2_outpin_expected_prev[7] !== 1'bx ) && ( reg2_outpin_prev[7] !== reg2_outpin_expected_prev[7] )
		&& ((reg2_outpin_expected_prev[7] !== last_reg2_outpin_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[7] = reg2_outpin_expected_prev[7];
	end
	if (
		( reg2_outpin_expected_prev[8] !== 1'bx ) && ( reg2_outpin_prev[8] !== reg2_outpin_expected_prev[8] )
		&& ((reg2_outpin_expected_prev[8] !== last_reg2_outpin_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[8] = reg2_outpin_expected_prev[8];
	end
	if (
		( reg2_outpin_expected_prev[9] !== 1'bx ) && ( reg2_outpin_prev[9] !== reg2_outpin_expected_prev[9] )
		&& ((reg2_outpin_expected_prev[9] !== last_reg2_outpin_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[9] = reg2_outpin_expected_prev[9];
	end
	if (
		( reg2_outpin_expected_prev[10] !== 1'bx ) && ( reg2_outpin_prev[10] !== reg2_outpin_expected_prev[10] )
		&& ((reg2_outpin_expected_prev[10] !== last_reg2_outpin_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[10] = reg2_outpin_expected_prev[10];
	end
	if (
		( reg2_outpin_expected_prev[11] !== 1'bx ) && ( reg2_outpin_prev[11] !== reg2_outpin_expected_prev[11] )
		&& ((reg2_outpin_expected_prev[11] !== last_reg2_outpin_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[11] = reg2_outpin_expected_prev[11];
	end
	if (
		( reg2_outpin_expected_prev[12] !== 1'bx ) && ( reg2_outpin_prev[12] !== reg2_outpin_expected_prev[12] )
		&& ((reg2_outpin_expected_prev[12] !== last_reg2_outpin_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[12] = reg2_outpin_expected_prev[12];
	end
	if (
		( reg2_outpin_expected_prev[13] !== 1'bx ) && ( reg2_outpin_prev[13] !== reg2_outpin_expected_prev[13] )
		&& ((reg2_outpin_expected_prev[13] !== last_reg2_outpin_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[13] = reg2_outpin_expected_prev[13];
	end
	if (
		( reg2_outpin_expected_prev[14] !== 1'bx ) && ( reg2_outpin_prev[14] !== reg2_outpin_expected_prev[14] )
		&& ((reg2_outpin_expected_prev[14] !== last_reg2_outpin_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[14] = reg2_outpin_expected_prev[14];
	end
	if (
		( reg2_outpin_expected_prev[15] !== 1'bx ) && ( reg2_outpin_prev[15] !== reg2_outpin_expected_prev[15] )
		&& ((reg2_outpin_expected_prev[15] !== last_reg2_outpin_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[15] = reg2_outpin_expected_prev[15];
	end
	if (
		( reg2_outpin_expected_prev[16] !== 1'bx ) && ( reg2_outpin_prev[16] !== reg2_outpin_expected_prev[16] )
		&& ((reg2_outpin_expected_prev[16] !== last_reg2_outpin_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[16] = reg2_outpin_expected_prev[16];
	end
	if (
		( reg2_outpin_expected_prev[17] !== 1'bx ) && ( reg2_outpin_prev[17] !== reg2_outpin_expected_prev[17] )
		&& ((reg2_outpin_expected_prev[17] !== last_reg2_outpin_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[17] = reg2_outpin_expected_prev[17];
	end
	if (
		( reg2_outpin_expected_prev[18] !== 1'bx ) && ( reg2_outpin_prev[18] !== reg2_outpin_expected_prev[18] )
		&& ((reg2_outpin_expected_prev[18] !== last_reg2_outpin_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[18] = reg2_outpin_expected_prev[18];
	end
	if (
		( reg2_outpin_expected_prev[19] !== 1'bx ) && ( reg2_outpin_prev[19] !== reg2_outpin_expected_prev[19] )
		&& ((reg2_outpin_expected_prev[19] !== last_reg2_outpin_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[19] = reg2_outpin_expected_prev[19];
	end
	if (
		( reg2_outpin_expected_prev[20] !== 1'bx ) && ( reg2_outpin_prev[20] !== reg2_outpin_expected_prev[20] )
		&& ((reg2_outpin_expected_prev[20] !== last_reg2_outpin_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[20] = reg2_outpin_expected_prev[20];
	end
	if (
		( reg2_outpin_expected_prev[21] !== 1'bx ) && ( reg2_outpin_prev[21] !== reg2_outpin_expected_prev[21] )
		&& ((reg2_outpin_expected_prev[21] !== last_reg2_outpin_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[21] = reg2_outpin_expected_prev[21];
	end
	if (
		( reg2_outpin_expected_prev[22] !== 1'bx ) && ( reg2_outpin_prev[22] !== reg2_outpin_expected_prev[22] )
		&& ((reg2_outpin_expected_prev[22] !== last_reg2_outpin_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[22] = reg2_outpin_expected_prev[22];
	end
	if (
		( reg2_outpin_expected_prev[23] !== 1'bx ) && ( reg2_outpin_prev[23] !== reg2_outpin_expected_prev[23] )
		&& ((reg2_outpin_expected_prev[23] !== last_reg2_outpin_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[23] = reg2_outpin_expected_prev[23];
	end
	if (
		( reg2_outpin_expected_prev[24] !== 1'bx ) && ( reg2_outpin_prev[24] !== reg2_outpin_expected_prev[24] )
		&& ((reg2_outpin_expected_prev[24] !== last_reg2_outpin_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[24] = reg2_outpin_expected_prev[24];
	end
	if (
		( reg2_outpin_expected_prev[25] !== 1'bx ) && ( reg2_outpin_prev[25] !== reg2_outpin_expected_prev[25] )
		&& ((reg2_outpin_expected_prev[25] !== last_reg2_outpin_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[25] = reg2_outpin_expected_prev[25];
	end
	if (
		( reg2_outpin_expected_prev[26] !== 1'bx ) && ( reg2_outpin_prev[26] !== reg2_outpin_expected_prev[26] )
		&& ((reg2_outpin_expected_prev[26] !== last_reg2_outpin_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[26] = reg2_outpin_expected_prev[26];
	end
	if (
		( reg2_outpin_expected_prev[27] !== 1'bx ) && ( reg2_outpin_prev[27] !== reg2_outpin_expected_prev[27] )
		&& ((reg2_outpin_expected_prev[27] !== last_reg2_outpin_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[27] = reg2_outpin_expected_prev[27];
	end
	if (
		( reg2_outpin_expected_prev[28] !== 1'bx ) && ( reg2_outpin_prev[28] !== reg2_outpin_expected_prev[28] )
		&& ((reg2_outpin_expected_prev[28] !== last_reg2_outpin_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[28] = reg2_outpin_expected_prev[28];
	end
	if (
		( reg2_outpin_expected_prev[29] !== 1'bx ) && ( reg2_outpin_prev[29] !== reg2_outpin_expected_prev[29] )
		&& ((reg2_outpin_expected_prev[29] !== last_reg2_outpin_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[29] = reg2_outpin_expected_prev[29];
	end
	if (
		( reg2_outpin_expected_prev[30] !== 1'bx ) && ( reg2_outpin_prev[30] !== reg2_outpin_expected_prev[30] )
		&& ((reg2_outpin_expected_prev[30] !== last_reg2_outpin_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[30] = reg2_outpin_expected_prev[30];
	end
	if (
		( reg2_outpin_expected_prev[31] !== 1'bx ) && ( reg2_outpin_prev[31] !== reg2_outpin_expected_prev[31] )
		&& ((reg2_outpin_expected_prev[31] !== last_reg2_outpin_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2_outpin[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2_outpin_expected_prev);
		$display ("     Real value = %b", reg2_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_reg2_outpin_exp[31] = reg2_outpin_expected_prev[31];
	end
	if (
		( reg2address_outpin_expected_prev[0] !== 1'bx ) && ( reg2address_outpin_prev[0] !== reg2address_outpin_expected_prev[0] )
		&& ((reg2address_outpin_expected_prev[0] !== last_reg2address_outpin_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2address_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2address_outpin_expected_prev);
		$display ("     Real value = %b", reg2address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg2address_outpin_exp[0] = reg2address_outpin_expected_prev[0];
	end
	if (
		( reg2address_outpin_expected_prev[1] !== 1'bx ) && ( reg2address_outpin_prev[1] !== reg2address_outpin_expected_prev[1] )
		&& ((reg2address_outpin_expected_prev[1] !== last_reg2address_outpin_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2address_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2address_outpin_expected_prev);
		$display ("     Real value = %b", reg2address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg2address_outpin_exp[1] = reg2address_outpin_expected_prev[1];
	end
	if (
		( reg2address_outpin_expected_prev[2] !== 1'bx ) && ( reg2address_outpin_prev[2] !== reg2address_outpin_expected_prev[2] )
		&& ((reg2address_outpin_expected_prev[2] !== last_reg2address_outpin_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2address_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2address_outpin_expected_prev);
		$display ("     Real value = %b", reg2address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg2address_outpin_exp[2] = reg2address_outpin_expected_prev[2];
	end
	if (
		( reg2address_outpin_expected_prev[3] !== 1'bx ) && ( reg2address_outpin_prev[3] !== reg2address_outpin_expected_prev[3] )
		&& ((reg2address_outpin_expected_prev[3] !== last_reg2address_outpin_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2address_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2address_outpin_expected_prev);
		$display ("     Real value = %b", reg2address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg2address_outpin_exp[3] = reg2address_outpin_expected_prev[3];
	end
	if (
		( reg2address_outpin_expected_prev[4] !== 1'bx ) && ( reg2address_outpin_prev[4] !== reg2address_outpin_expected_prev[4] )
		&& ((reg2address_outpin_expected_prev[4] !== last_reg2address_outpin_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg2address_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg2address_outpin_expected_prev);
		$display ("     Real value = %b", reg2address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_reg2address_outpin_exp[4] = reg2address_outpin_expected_prev[4];
	end
	if (
		( reg3address_outpin_expected_prev[0] !== 1'bx ) && ( reg3address_outpin_prev[0] !== reg3address_outpin_expected_prev[0] )
		&& ((reg3address_outpin_expected_prev[0] !== last_reg3address_outpin_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg3address_outpin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg3address_outpin_expected_prev);
		$display ("     Real value = %b", reg3address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg3address_outpin_exp[0] = reg3address_outpin_expected_prev[0];
	end
	if (
		( reg3address_outpin_expected_prev[1] !== 1'bx ) && ( reg3address_outpin_prev[1] !== reg3address_outpin_expected_prev[1] )
		&& ((reg3address_outpin_expected_prev[1] !== last_reg3address_outpin_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg3address_outpin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg3address_outpin_expected_prev);
		$display ("     Real value = %b", reg3address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg3address_outpin_exp[1] = reg3address_outpin_expected_prev[1];
	end
	if (
		( reg3address_outpin_expected_prev[2] !== 1'bx ) && ( reg3address_outpin_prev[2] !== reg3address_outpin_expected_prev[2] )
		&& ((reg3address_outpin_expected_prev[2] !== last_reg3address_outpin_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg3address_outpin[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg3address_outpin_expected_prev);
		$display ("     Real value = %b", reg3address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg3address_outpin_exp[2] = reg3address_outpin_expected_prev[2];
	end
	if (
		( reg3address_outpin_expected_prev[3] !== 1'bx ) && ( reg3address_outpin_prev[3] !== reg3address_outpin_expected_prev[3] )
		&& ((reg3address_outpin_expected_prev[3] !== last_reg3address_outpin_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg3address_outpin[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg3address_outpin_expected_prev);
		$display ("     Real value = %b", reg3address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg3address_outpin_exp[3] = reg3address_outpin_expected_prev[3];
	end
	if (
		( reg3address_outpin_expected_prev[4] !== 1'bx ) && ( reg3address_outpin_prev[4] !== reg3address_outpin_expected_prev[4] )
		&& ((reg3address_outpin_expected_prev[4] !== last_reg3address_outpin_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg3address_outpin[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg3address_outpin_expected_prev);
		$display ("     Real value = %b", reg3address_outpin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_reg3address_outpin_exp[4] = reg3address_outpin_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#30000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPUProject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cpu_clk;
reg rest;
// wires                                               
wire [31:0] alupin;
wire [31:0] instruction_pin;
wire [31:0] jump_mux_option1_outpin;
wire [31:0] jump_mux_option2_outpin;
wire [31:0] jump_mux_option3_outpin;
wire [31:0] jump_mux_option4_outpin;
wire [1:0] jump_mux_select_outpin;
wire pc_enable_pin;
wire [31:0] pc_input_pin;
wire [31:0] pcpin2;
wire [31:0] reg1_outpin;
wire [4:0] reg1address_outpin;
wire [31:0] reg2_outpin;
wire [4:0] reg2address_outpin;
wire [4:0] reg3address_outpin;

wire sampler;                             

// assign statements (if any)                          
CPUProject i1 (
// port map - connection between master ports and signals/registers   
	.alupin(alupin),
	.cpu_clk(cpu_clk),
	.instruction_pin(instruction_pin),
	.jump_mux_option1_outpin(jump_mux_option1_outpin),
	.jump_mux_option2_outpin(jump_mux_option2_outpin),
	.jump_mux_option3_outpin(jump_mux_option3_outpin),
	.jump_mux_option4_outpin(jump_mux_option4_outpin),
	.jump_mux_select_outpin(jump_mux_select_outpin),
	.pc_enable_pin(pc_enable_pin),
	.pc_input_pin(pc_input_pin),
	.pcpin2(pcpin2),
	.reg1_outpin(reg1_outpin),
	.reg1address_outpin(reg1address_outpin),
	.reg2_outpin(reg2_outpin),
	.reg2address_outpin(reg2address_outpin),
	.reg3address_outpin(reg3address_outpin),
	.rest(rest)
);

// cpu_clk
always
begin
	cpu_clk = 1'b0;
	cpu_clk = #5000 1'b1;
	#5000;
end 

// rest
initial
begin
	rest = 1'b0;
end 

CPUProject_vlg_sample_tst tb_sample (
	.cpu_clk(cpu_clk),
	.rest(rest),
	.sampler_tx(sampler)
);

CPUProject_vlg_check_tst tb_out(
	.alupin(alupin),
	.instruction_pin(instruction_pin),
	.jump_mux_option1_outpin(jump_mux_option1_outpin),
	.jump_mux_option2_outpin(jump_mux_option2_outpin),
	.jump_mux_option3_outpin(jump_mux_option3_outpin),
	.jump_mux_option4_outpin(jump_mux_option4_outpin),
	.jump_mux_select_outpin(jump_mux_select_outpin),
	.pc_enable_pin(pc_enable_pin),
	.pc_input_pin(pc_input_pin),
	.pcpin2(pcpin2),
	.reg1_outpin(reg1_outpin),
	.reg1address_outpin(reg1address_outpin),
	.reg2_outpin(reg2_outpin),
	.reg2address_outpin(reg2address_outpin),
	.reg3address_outpin(reg3address_outpin),
	.sampler_rx(sampler)
);
endmodule

